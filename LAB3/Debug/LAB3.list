
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000261c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002728  08002728  00012728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800274c  0800274c  00020148  2**0
                  CONTENTS
  4 .ARM          00000000  0800274c  0800274c  00020148  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800274c  0800274c  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800274c  0800274c  0001274c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002750  08002750  00012750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  08002754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000148  0800289c  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  0800289c  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020171  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000895c  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dc1  00000000  00000000  00028b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a78  00000000  00000000  0002a8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ef  00000000  00000000  0002b350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001834d  00000000  00000000  0002bb3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d71e  00000000  00000000  00043e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085ce3  00000000  00000000  000515aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028e4  00000000  00000000  000d7290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000d9b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000148 	.word	0x20000148
 8000128:	00000000 	.word	0x00000000
 800012c:	08002710 	.word	0x08002710

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000014c 	.word	0x2000014c
 8000148:	08002710 	.word	0x08002710

0800014c <display7SEG>:

int led7SEGBuffer[4] = {0 ,0 ,0 ,0};
int index_led = 1;

static void display7SEG(int num)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, NUM[num][0]);
 8000154:	4935      	ldr	r1, [pc, #212]	; (800022c <display7SEG+0xe0>)
 8000156:	687a      	ldr	r2, [r7, #4]
 8000158:	4613      	mov	r3, r2
 800015a:	00db      	lsls	r3, r3, #3
 800015c:	1a9b      	subs	r3, r3, r2
 800015e:	009b      	lsls	r3, r3, #2
 8000160:	440b      	add	r3, r1
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	b2db      	uxtb	r3, r3
 8000166:	461a      	mov	r2, r3
 8000168:	2101      	movs	r1, #1
 800016a:	4831      	ldr	r0, [pc, #196]	; (8000230 <display7SEG+0xe4>)
 800016c:	f001 fad1 	bl	8001712 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, NUM[num][1]);
 8000170:	492e      	ldr	r1, [pc, #184]	; (800022c <display7SEG+0xe0>)
 8000172:	687a      	ldr	r2, [r7, #4]
 8000174:	4613      	mov	r3, r2
 8000176:	00db      	lsls	r3, r3, #3
 8000178:	1a9b      	subs	r3, r3, r2
 800017a:	009b      	lsls	r3, r3, #2
 800017c:	440b      	add	r3, r1
 800017e:	3304      	adds	r3, #4
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	b2db      	uxtb	r3, r3
 8000184:	461a      	mov	r2, r3
 8000186:	2102      	movs	r1, #2
 8000188:	4829      	ldr	r0, [pc, #164]	; (8000230 <display7SEG+0xe4>)
 800018a:	f001 fac2 	bl	8001712 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, NUM[num][2]);
 800018e:	4927      	ldr	r1, [pc, #156]	; (800022c <display7SEG+0xe0>)
 8000190:	687a      	ldr	r2, [r7, #4]
 8000192:	4613      	mov	r3, r2
 8000194:	00db      	lsls	r3, r3, #3
 8000196:	1a9b      	subs	r3, r3, r2
 8000198:	009b      	lsls	r3, r3, #2
 800019a:	440b      	add	r3, r1
 800019c:	3308      	adds	r3, #8
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	b2db      	uxtb	r3, r3
 80001a2:	461a      	mov	r2, r3
 80001a4:	2104      	movs	r1, #4
 80001a6:	4822      	ldr	r0, [pc, #136]	; (8000230 <display7SEG+0xe4>)
 80001a8:	f001 fab3 	bl	8001712 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, NUM[num][3]);
 80001ac:	491f      	ldr	r1, [pc, #124]	; (800022c <display7SEG+0xe0>)
 80001ae:	687a      	ldr	r2, [r7, #4]
 80001b0:	4613      	mov	r3, r2
 80001b2:	00db      	lsls	r3, r3, #3
 80001b4:	1a9b      	subs	r3, r3, r2
 80001b6:	009b      	lsls	r3, r3, #2
 80001b8:	440b      	add	r3, r1
 80001ba:	330c      	adds	r3, #12
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	b2db      	uxtb	r3, r3
 80001c0:	461a      	mov	r2, r3
 80001c2:	2108      	movs	r1, #8
 80001c4:	481a      	ldr	r0, [pc, #104]	; (8000230 <display7SEG+0xe4>)
 80001c6:	f001 faa4 	bl	8001712 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, NUM[num][4]);
 80001ca:	4918      	ldr	r1, [pc, #96]	; (800022c <display7SEG+0xe0>)
 80001cc:	687a      	ldr	r2, [r7, #4]
 80001ce:	4613      	mov	r3, r2
 80001d0:	00db      	lsls	r3, r3, #3
 80001d2:	1a9b      	subs	r3, r3, r2
 80001d4:	009b      	lsls	r3, r3, #2
 80001d6:	440b      	add	r3, r1
 80001d8:	3310      	adds	r3, #16
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	461a      	mov	r2, r3
 80001e0:	2110      	movs	r1, #16
 80001e2:	4813      	ldr	r0, [pc, #76]	; (8000230 <display7SEG+0xe4>)
 80001e4:	f001 fa95 	bl	8001712 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, NUM[num][5]);
 80001e8:	4910      	ldr	r1, [pc, #64]	; (800022c <display7SEG+0xe0>)
 80001ea:	687a      	ldr	r2, [r7, #4]
 80001ec:	4613      	mov	r3, r2
 80001ee:	00db      	lsls	r3, r3, #3
 80001f0:	1a9b      	subs	r3, r3, r2
 80001f2:	009b      	lsls	r3, r3, #2
 80001f4:	440b      	add	r3, r1
 80001f6:	3314      	adds	r3, #20
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	461a      	mov	r2, r3
 80001fe:	2120      	movs	r1, #32
 8000200:	480b      	ldr	r0, [pc, #44]	; (8000230 <display7SEG+0xe4>)
 8000202:	f001 fa86 	bl	8001712 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, NUM[num][6]);
 8000206:	4909      	ldr	r1, [pc, #36]	; (800022c <display7SEG+0xe0>)
 8000208:	687a      	ldr	r2, [r7, #4]
 800020a:	4613      	mov	r3, r2
 800020c:	00db      	lsls	r3, r3, #3
 800020e:	1a9b      	subs	r3, r3, r2
 8000210:	009b      	lsls	r3, r3, #2
 8000212:	440b      	add	r3, r1
 8000214:	3318      	adds	r3, #24
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	b2db      	uxtb	r3, r3
 800021a:	461a      	mov	r2, r3
 800021c:	2140      	movs	r1, #64	; 0x40
 800021e:	4804      	ldr	r0, [pc, #16]	; (8000230 <display7SEG+0xe4>)
 8000220:	f001 fa77 	bl	8001712 <HAL_GPIO_WritePin>
}
 8000224:	bf00      	nop
 8000226:	3708      	adds	r7, #8
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	20000000 	.word	0x20000000
 8000230:	40010c00 	.word	0x40010c00

08000234 <updateLED7SEGBuffer>:
static void clearLed7SEG(){
	HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN2_Pin | EN3_Pin | EN4_Pin , SET);
}

void updateLED7SEGBuffer(int value_1, int value_2)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
	led7SEGBuffer[0] = value_1/10;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <updateLED7SEGBuffer+0x70>)
 8000242:	fb82 1203 	smull	r1, r2, r2, r3
 8000246:	1092      	asrs	r2, r2, #2
 8000248:	17db      	asrs	r3, r3, #31
 800024a:	1ad3      	subs	r3, r2, r3
 800024c:	4a16      	ldr	r2, [pc, #88]	; (80002a8 <updateLED7SEGBuffer+0x74>)
 800024e:	6013      	str	r3, [r2, #0]
	led7SEGBuffer[1] = value_1%10;
 8000250:	6879      	ldr	r1, [r7, #4]
 8000252:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <updateLED7SEGBuffer+0x70>)
 8000254:	fb83 2301 	smull	r2, r3, r3, r1
 8000258:	109a      	asrs	r2, r3, #2
 800025a:	17cb      	asrs	r3, r1, #31
 800025c:	1ad2      	subs	r2, r2, r3
 800025e:	4613      	mov	r3, r2
 8000260:	009b      	lsls	r3, r3, #2
 8000262:	4413      	add	r3, r2
 8000264:	005b      	lsls	r3, r3, #1
 8000266:	1aca      	subs	r2, r1, r3
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <updateLED7SEGBuffer+0x74>)
 800026a:	605a      	str	r2, [r3, #4]
	led7SEGBuffer[2] = value_2/10;
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	4a0d      	ldr	r2, [pc, #52]	; (80002a4 <updateLED7SEGBuffer+0x70>)
 8000270:	fb82 1203 	smull	r1, r2, r2, r3
 8000274:	1092      	asrs	r2, r2, #2
 8000276:	17db      	asrs	r3, r3, #31
 8000278:	1ad3      	subs	r3, r2, r3
 800027a:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <updateLED7SEGBuffer+0x74>)
 800027c:	6093      	str	r3, [r2, #8]
	led7SEGBuffer[3] = value_2%10;
 800027e:	6839      	ldr	r1, [r7, #0]
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <updateLED7SEGBuffer+0x70>)
 8000282:	fb83 2301 	smull	r2, r3, r3, r1
 8000286:	109a      	asrs	r2, r3, #2
 8000288:	17cb      	asrs	r3, r1, #31
 800028a:	1ad2      	subs	r2, r2, r3
 800028c:	4613      	mov	r3, r2
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	4413      	add	r3, r2
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	1aca      	subs	r2, r1, r3
 8000296:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <updateLED7SEGBuffer+0x74>)
 8000298:	60da      	str	r2, [r3, #12]
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr
 80002a4:	66666667 	.word	0x66666667
 80002a8:	20000164 	.word	0x20000164

080002ac <updateLed7SEG>:

void updateLed7SEG(int index)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	switch (index) {
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	3b01      	subs	r3, #1
 80002b8:	2b03      	cmp	r3, #3
 80002ba:	d87f      	bhi.n	80003bc <updateLed7SEG+0x110>
 80002bc:	a201      	add	r2, pc, #4	; (adr r2, 80002c4 <updateLed7SEG+0x18>)
 80002be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c2:	bf00      	nop
 80002c4:	080002d5 	.word	0x080002d5
 80002c8:	0800030f 	.word	0x0800030f
 80002cc:	08000349 	.word	0x08000349
 80002d0:	08000383 	.word	0x08000383
		case 1:
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2108      	movs	r1, #8
 80002d8:	483b      	ldr	r0, [pc, #236]	; (80003c8 <updateLed7SEG+0x11c>)
 80002da:	f001 fa1a 	bl	8001712 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80002de:	2201      	movs	r2, #1
 80002e0:	2110      	movs	r1, #16
 80002e2:	4839      	ldr	r0, [pc, #228]	; (80003c8 <updateLed7SEG+0x11c>)
 80002e4:	f001 fa15 	bl	8001712 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80002e8:	2201      	movs	r2, #1
 80002ea:	2120      	movs	r1, #32
 80002ec:	4836      	ldr	r0, [pc, #216]	; (80003c8 <updateLed7SEG+0x11c>)
 80002ee:	f001 fa10 	bl	8001712 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 80002f2:	2201      	movs	r2, #1
 80002f4:	2140      	movs	r1, #64	; 0x40
 80002f6:	4834      	ldr	r0, [pc, #208]	; (80003c8 <updateLed7SEG+0x11c>)
 80002f8:	f001 fa0b 	bl	8001712 <HAL_GPIO_WritePin>
			display7SEG(led7SEGBuffer[index - 1]);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	3b01      	subs	r3, #1
 8000300:	4a32      	ldr	r2, [pc, #200]	; (80003cc <updateLed7SEG+0x120>)
 8000302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000306:	4618      	mov	r0, r3
 8000308:	f7ff ff20 	bl	800014c <display7SEG>
			break;
 800030c:	e057      	b.n	80003be <updateLed7SEG+0x112>
		case 2:
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800030e:	2201      	movs	r2, #1
 8000310:	2108      	movs	r1, #8
 8000312:	482d      	ldr	r0, [pc, #180]	; (80003c8 <updateLed7SEG+0x11c>)
 8000314:	f001 f9fd 	bl	8001712 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2110      	movs	r1, #16
 800031c:	482a      	ldr	r0, [pc, #168]	; (80003c8 <updateLed7SEG+0x11c>)
 800031e:	f001 f9f8 	bl	8001712 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000322:	2201      	movs	r2, #1
 8000324:	2120      	movs	r1, #32
 8000326:	4828      	ldr	r0, [pc, #160]	; (80003c8 <updateLed7SEG+0x11c>)
 8000328:	f001 f9f3 	bl	8001712 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 800032c:	2201      	movs	r2, #1
 800032e:	2140      	movs	r1, #64	; 0x40
 8000330:	4825      	ldr	r0, [pc, #148]	; (80003c8 <updateLed7SEG+0x11c>)
 8000332:	f001 f9ee 	bl	8001712 <HAL_GPIO_WritePin>
			display7SEG(led7SEGBuffer[index - 1]);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	3b01      	subs	r3, #1
 800033a:	4a24      	ldr	r2, [pc, #144]	; (80003cc <updateLed7SEG+0x120>)
 800033c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff03 	bl	800014c <display7SEG>
			break;
 8000346:	e03a      	b.n	80003be <updateLed7SEG+0x112>
		case 3:
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000348:	2201      	movs	r2, #1
 800034a:	2108      	movs	r1, #8
 800034c:	481e      	ldr	r0, [pc, #120]	; (80003c8 <updateLed7SEG+0x11c>)
 800034e:	f001 f9e0 	bl	8001712 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000352:	2201      	movs	r2, #1
 8000354:	2110      	movs	r1, #16
 8000356:	481c      	ldr	r0, [pc, #112]	; (80003c8 <updateLed7SEG+0x11c>)
 8000358:	f001 f9db 	bl	8001712 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	2120      	movs	r1, #32
 8000360:	4819      	ldr	r0, [pc, #100]	; (80003c8 <updateLed7SEG+0x11c>)
 8000362:	f001 f9d6 	bl	8001712 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 8000366:	2201      	movs	r2, #1
 8000368:	2140      	movs	r1, #64	; 0x40
 800036a:	4817      	ldr	r0, [pc, #92]	; (80003c8 <updateLed7SEG+0x11c>)
 800036c:	f001 f9d1 	bl	8001712 <HAL_GPIO_WritePin>
			display7SEG(led7SEGBuffer[index - 1]);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	3b01      	subs	r3, #1
 8000374:	4a15      	ldr	r2, [pc, #84]	; (80003cc <updateLed7SEG+0x120>)
 8000376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff fee6 	bl	800014c <display7SEG>
			break;
 8000380:	e01d      	b.n	80003be <updateLed7SEG+0x112>
		case 4:
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000382:	2201      	movs	r2, #1
 8000384:	2108      	movs	r1, #8
 8000386:	4810      	ldr	r0, [pc, #64]	; (80003c8 <updateLed7SEG+0x11c>)
 8000388:	f001 f9c3 	bl	8001712 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	2110      	movs	r1, #16
 8000390:	480d      	ldr	r0, [pc, #52]	; (80003c8 <updateLed7SEG+0x11c>)
 8000392:	f001 f9be 	bl	8001712 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000396:	2201      	movs	r2, #1
 8000398:	2120      	movs	r1, #32
 800039a:	480b      	ldr	r0, [pc, #44]	; (80003c8 <updateLed7SEG+0x11c>)
 800039c:	f001 f9b9 	bl	8001712 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2140      	movs	r1, #64	; 0x40
 80003a4:	4808      	ldr	r0, [pc, #32]	; (80003c8 <updateLed7SEG+0x11c>)
 80003a6:	f001 f9b4 	bl	8001712 <HAL_GPIO_WritePin>
			display7SEG(led7SEGBuffer[index - 1]);
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	3b01      	subs	r3, #1
 80003ae:	4a07      	ldr	r2, [pc, #28]	; (80003cc <updateLed7SEG+0x120>)
 80003b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f7ff fec9 	bl	800014c <display7SEG>
			break;
 80003ba:	e000      	b.n	80003be <updateLed7SEG+0x112>
		default:
			break;
 80003bc:	bf00      	nop
	}
}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40010800 	.word	0x40010800
 80003cc:	20000164 	.word	0x20000164

080003d0 <fsm_auto>:
#include "global.h"

static int set_led_status = 0;

void fsm_auto(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	updateLed7SEG(index_led);
 80003d4:	4b69      	ldr	r3, [pc, #420]	; (800057c <fsm_auto+0x1ac>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff ff67 	bl	80002ac <updateLed7SEG>
	if (getTimerFlag(TIMER_UPDATE_7SEG))
 80003de:	2001      	movs	r0, #1
 80003e0:	f000 fdd0 	bl	8000f84 <getTimerFlag>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d00f      	beq.n	800040a <fsm_auto+0x3a>
	{
		index_led++;
 80003ea:	4b64      	ldr	r3, [pc, #400]	; (800057c <fsm_auto+0x1ac>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	3301      	adds	r3, #1
 80003f0:	4a62      	ldr	r2, [pc, #392]	; (800057c <fsm_auto+0x1ac>)
 80003f2:	6013      	str	r3, [r2, #0]
		if (index_led > 4)
 80003f4:	4b61      	ldr	r3, [pc, #388]	; (800057c <fsm_auto+0x1ac>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2b04      	cmp	r3, #4
 80003fa:	dd02      	ble.n	8000402 <fsm_auto+0x32>
		{
			index_led = 1;
 80003fc:	4b5f      	ldr	r3, [pc, #380]	; (800057c <fsm_auto+0x1ac>)
 80003fe:	2201      	movs	r2, #1
 8000400:	601a      	str	r2, [r3, #0]
		}
		setTimer(TIMER_UPDATE_7SEG, TIMER_UPDATE_7SEG_DUR);
 8000402:	21fa      	movs	r1, #250	; 0xfa
 8000404:	2001      	movs	r0, #1
 8000406:	f000 fd6d 	bl	8000ee4 <setTimer>
	}
	switch (mode) {
 800040a:	4b5d      	ldr	r3, [pc, #372]	; (8000580 <fsm_auto+0x1b0>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	3b0b      	subs	r3, #11
 8000410:	2b03      	cmp	r3, #3
 8000412:	f200 80a7 	bhi.w	8000564 <fsm_auto+0x194>
 8000416:	a201      	add	r2, pc, #4	; (adr r2, 800041c <fsm_auto+0x4c>)
 8000418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041c:	0800042d 	.word	0x0800042d
 8000420:	0800044b 	.word	0x0800044b
 8000424:	08000507 	.word	0x08000507
 8000428:	080004a9 	.word	0x080004a9
		case NORMAL:

			if (getTimerFlag(TIMER_LIGHT_TRAFFIC))
 800042c:	2000      	movs	r0, #0
 800042e:	f000 fda9 	bl	8000f84 <getTimerFlag>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	f000 8097 	beq.w	8000568 <fsm_auto+0x198>
			{
				updateTrafficLight();
 800043a:	f000 fb47 	bl	8000acc <updateTrafficLight>
				setTimer(TIMER_LIGHT_TRAFFIC, TIMER_LIGHT_TRAFFIC_DUR);
 800043e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000442:	2000      	movs	r0, #0
 8000444:	f000 fd4e 	bl	8000ee4 <setTimer>
			}

			break;
 8000448:	e08e      	b.n	8000568 <fsm_auto+0x198>
		case SET_TIME_RED:
			updateLED7SEGBuffer(mode, time_red);
 800044a:	4b4d      	ldr	r3, [pc, #308]	; (8000580 <fsm_auto+0x1b0>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a4d      	ldr	r2, [pc, #308]	; (8000584 <fsm_auto+0x1b4>)
 8000450:	6812      	ldr	r2, [r2, #0]
 8000452:	4611      	mov	r1, r2
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff feed 	bl	8000234 <updateLED7SEGBuffer>
			if (getTimerFlag(TIMER_SET_LED))
 800045a:	2002      	movs	r0, #2
 800045c:	f000 fd92 	bl	8000f84 <getTimerFlag>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	f000 8082 	beq.w	800056c <fsm_auto+0x19c>
			{
				HAL_GPIO_WritePin(RED13_GPIO_Port, RED13_Pin, set_led_status);
 8000468:	4b47      	ldr	r3, [pc, #284]	; (8000588 <fsm_auto+0x1b8>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	b2db      	uxtb	r3, r3
 800046e:	461a      	mov	r2, r3
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	4846      	ldr	r0, [pc, #280]	; (800058c <fsm_auto+0x1bc>)
 8000474:	f001 f94d 	bl	8001712 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RED24_GPIO_Port, RED24_Pin, set_led_status);
 8000478:	4b43      	ldr	r3, [pc, #268]	; (8000588 <fsm_auto+0x1b8>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	b2db      	uxtb	r3, r3
 800047e:	461a      	mov	r2, r3
 8000480:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000484:	4841      	ldr	r0, [pc, #260]	; (800058c <fsm_auto+0x1bc>)
 8000486:	f001 f944 	bl	8001712 <HAL_GPIO_WritePin>
				set_led_status = !set_led_status;
 800048a:	4b3f      	ldr	r3, [pc, #252]	; (8000588 <fsm_auto+0x1b8>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	bf0c      	ite	eq
 8000492:	2301      	moveq	r3, #1
 8000494:	2300      	movne	r3, #0
 8000496:	b2db      	uxtb	r3, r3
 8000498:	461a      	mov	r2, r3
 800049a:	4b3b      	ldr	r3, [pc, #236]	; (8000588 <fsm_auto+0x1b8>)
 800049c:	601a      	str	r2, [r3, #0]
				setTimer(TIMER_SET_LED, TIMER_SET_LED_DUR);
 800049e:	21fa      	movs	r1, #250	; 0xfa
 80004a0:	2002      	movs	r0, #2
 80004a2:	f000 fd1f 	bl	8000ee4 <setTimer>
			}
			break;
 80004a6:	e061      	b.n	800056c <fsm_auto+0x19c>
		case SET_TIME_GREEN:
			updateLED7SEGBuffer(mode, time_green);
 80004a8:	4b35      	ldr	r3, [pc, #212]	; (8000580 <fsm_auto+0x1b0>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a38      	ldr	r2, [pc, #224]	; (8000590 <fsm_auto+0x1c0>)
 80004ae:	6812      	ldr	r2, [r2, #0]
 80004b0:	4611      	mov	r1, r2
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff febe 	bl	8000234 <updateLED7SEGBuffer>
			if (getTimerFlag(TIMER_SET_LED))
 80004b8:	2002      	movs	r0, #2
 80004ba:	f000 fd63 	bl	8000f84 <getTimerFlag>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d055      	beq.n	8000570 <fsm_auto+0x1a0>
			{
				HAL_GPIO_WritePin(GREEN13_GPIO_Port, GREEN13_Pin, set_led_status);
 80004c4:	4b30      	ldr	r3, [pc, #192]	; (8000588 <fsm_auto+0x1b8>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	461a      	mov	r2, r3
 80004cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004d0:	482e      	ldr	r0, [pc, #184]	; (800058c <fsm_auto+0x1bc>)
 80004d2:	f001 f91e 	bl	8001712 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN24_GPIO_Port, GREEN24_Pin, set_led_status);
 80004d6:	4b2c      	ldr	r3, [pc, #176]	; (8000588 <fsm_auto+0x1b8>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	461a      	mov	r2, r3
 80004de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004e2:	482a      	ldr	r0, [pc, #168]	; (800058c <fsm_auto+0x1bc>)
 80004e4:	f001 f915 	bl	8001712 <HAL_GPIO_WritePin>
				set_led_status = !set_led_status;
 80004e8:	4b27      	ldr	r3, [pc, #156]	; (8000588 <fsm_auto+0x1b8>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	bf0c      	ite	eq
 80004f0:	2301      	moveq	r3, #1
 80004f2:	2300      	movne	r3, #0
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	461a      	mov	r2, r3
 80004f8:	4b23      	ldr	r3, [pc, #140]	; (8000588 <fsm_auto+0x1b8>)
 80004fa:	601a      	str	r2, [r3, #0]
				setTimer(TIMER_SET_LED, TIMER_SET_LED_DUR);
 80004fc:	21fa      	movs	r1, #250	; 0xfa
 80004fe:	2002      	movs	r0, #2
 8000500:	f000 fcf0 	bl	8000ee4 <setTimer>
			}
			break;
 8000504:	e034      	b.n	8000570 <fsm_auto+0x1a0>
		case SET_TIME_AMBER:
			updateLED7SEGBuffer(mode, time_amber);
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <fsm_auto+0x1b0>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a22      	ldr	r2, [pc, #136]	; (8000594 <fsm_auto+0x1c4>)
 800050c:	6812      	ldr	r2, [r2, #0]
 800050e:	4611      	mov	r1, r2
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff fe8f 	bl	8000234 <updateLED7SEGBuffer>
			if (getTimerFlag(TIMER_SET_LED))
 8000516:	2002      	movs	r0, #2
 8000518:	f000 fd34 	bl	8000f84 <getTimerFlag>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d028      	beq.n	8000574 <fsm_auto+0x1a4>
			{
				HAL_GPIO_WritePin(AMBER13_GPIO_Port, AMBER13_Pin, set_led_status);
 8000522:	4b19      	ldr	r3, [pc, #100]	; (8000588 <fsm_auto+0x1b8>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	b2db      	uxtb	r3, r3
 8000528:	461a      	mov	r2, r3
 800052a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052e:	4817      	ldr	r0, [pc, #92]	; (800058c <fsm_auto+0x1bc>)
 8000530:	f001 f8ef 	bl	8001712 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(AMBER24_GPIO_Port, AMBER24_Pin, set_led_status);
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <fsm_auto+0x1b8>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	461a      	mov	r2, r3
 800053c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000540:	4812      	ldr	r0, [pc, #72]	; (800058c <fsm_auto+0x1bc>)
 8000542:	f001 f8e6 	bl	8001712 <HAL_GPIO_WritePin>
				set_led_status = !set_led_status;
 8000546:	4b10      	ldr	r3, [pc, #64]	; (8000588 <fsm_auto+0x1b8>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	bf0c      	ite	eq
 800054e:	2301      	moveq	r3, #1
 8000550:	2300      	movne	r3, #0
 8000552:	b2db      	uxtb	r3, r3
 8000554:	461a      	mov	r2, r3
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <fsm_auto+0x1b8>)
 8000558:	601a      	str	r2, [r3, #0]
				setTimer(TIMER_SET_LED, TIMER_SET_LED_DUR);
 800055a:	21fa      	movs	r1, #250	; 0xfa
 800055c:	2002      	movs	r0, #2
 800055e:	f000 fcc1 	bl	8000ee4 <setTimer>
			}
			break;
 8000562:	e007      	b.n	8000574 <fsm_auto+0x1a4>
		default:
			break;
 8000564:	bf00      	nop
 8000566:	e006      	b.n	8000576 <fsm_auto+0x1a6>
			break;
 8000568:	bf00      	nop
 800056a:	e004      	b.n	8000576 <fsm_auto+0x1a6>
			break;
 800056c:	bf00      	nop
 800056e:	e002      	b.n	8000576 <fsm_auto+0x1a6>
			break;
 8000570:	bf00      	nop
 8000572:	e000      	b.n	8000576 <fsm_auto+0x1a6>
			break;
 8000574:	bf00      	nop
	}
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000118 	.word	0x20000118
 8000580:	20000120 	.word	0x20000120
 8000584:	20000124 	.word	0x20000124
 8000588:	20000174 	.word	0x20000174
 800058c:	40010800 	.word	0x40010800
 8000590:	2000012c 	.word	0x2000012c
 8000594:	20000128 	.word	0x20000128

08000598 <fsm_manual>:
#include <light_traffic.h>
#include <display7SEG.h>
#include <soft_timer.h>

void fsm_manual(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	int temp = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]

	switch (mode) {
 80005a2:	4b77      	ldr	r3, [pc, #476]	; (8000780 <fsm_manual+0x1e8>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	3b0b      	subs	r3, #11
 80005a8:	2b03      	cmp	r3, #3
 80005aa:	f200 80e4 	bhi.w	8000776 <fsm_manual+0x1de>
 80005ae:	a201      	add	r2, pc, #4	; (adr r2, 80005b4 <fsm_manual+0x1c>)
 80005b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b4:	080005c5 	.word	0x080005c5
 80005b8:	08000609 	.word	0x08000609
 80005bc:	0800068d 	.word	0x0800068d
 80005c0:	080006f5 	.word	0x080006f5
		case NORMAL:
			if (isButtonPressed(0))
 80005c4:	2000      	movs	r0, #0
 80005c6:	f000 f931 	bl	800082c <isButtonPressed>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d014      	beq.n	80005fa <fsm_manual+0x62>
			{
				clear_led_red_amber_green();
 80005d0:	f000 f8e2 	bl	8000798 <clear_led_red_amber_green>
				value = time_red;
 80005d4:	4b6b      	ldr	r3, [pc, #428]	; (8000784 <fsm_manual+0x1ec>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a6b      	ldr	r2, [pc, #428]	; (8000788 <fsm_manual+0x1f0>)
 80005da:	6013      	str	r3, [r2, #0]
				mode = SET_TIME_RED;
 80005dc:	4b68      	ldr	r3, [pc, #416]	; (8000780 <fsm_manual+0x1e8>)
 80005de:	220c      	movs	r2, #12
 80005e0:	601a      	str	r2, [r3, #0]
				setTimer(TIMER_SET_LED, TIMER_SET_LED_DUR);
 80005e2:	21fa      	movs	r1, #250	; 0xfa
 80005e4:	2002      	movs	r0, #2
 80005e6:	f000 fc7d 	bl	8000ee4 <setTimer>
				updateLED7SEGBuffer(mode, value);
 80005ea:	4b65      	ldr	r3, [pc, #404]	; (8000780 <fsm_manual+0x1e8>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a66      	ldr	r2, [pc, #408]	; (8000788 <fsm_manual+0x1f0>)
 80005f0:	6812      	ldr	r2, [r2, #0]
 80005f2:	4611      	mov	r1, r2
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff fe1d 	bl	8000234 <updateLED7SEGBuffer>
			}

			if (isButtonPressed(1))
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 f916 	bl	800082c <isButtonPressed>
			{

			}

			if (isButtonPressed(2))
 8000600:	2002      	movs	r0, #2
 8000602:	f000 f913 	bl	800082c <isButtonPressed>
			{

			}
			break;
 8000606:	e0b7      	b.n	8000778 <fsm_manual+0x1e0>
		case SET_TIME_RED:

			if (isButtonPressed(0))
 8000608:	2000      	movs	r0, #0
 800060a:	f000 f90f 	bl	800082c <isButtonPressed>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d008      	beq.n	8000626 <fsm_manual+0x8e>
			{
				clear_led_red_amber_green();
 8000614:	f000 f8c0 	bl	8000798 <clear_led_red_amber_green>
				value = time_amber;
 8000618:	4b5c      	ldr	r3, [pc, #368]	; (800078c <fsm_manual+0x1f4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a5a      	ldr	r2, [pc, #360]	; (8000788 <fsm_manual+0x1f0>)
 800061e:	6013      	str	r3, [r2, #0]
				mode = SET_TIME_AMBER;
 8000620:	4b57      	ldr	r3, [pc, #348]	; (8000780 <fsm_manual+0x1e8>)
 8000622:	220d      	movs	r2, #13
 8000624:	601a      	str	r2, [r3, #0]
			}

			if (isButtonPressed(1))
 8000626:	2001      	movs	r0, #1
 8000628:	f000 f900 	bl	800082c <isButtonPressed>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d00b      	beq.n	800064a <fsm_manual+0xb2>
			{
				value++;
 8000632:	4b55      	ldr	r3, [pc, #340]	; (8000788 <fsm_manual+0x1f0>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	3301      	adds	r3, #1
 8000638:	4a53      	ldr	r2, [pc, #332]	; (8000788 <fsm_manual+0x1f0>)
 800063a:	6013      	str	r3, [r2, #0]
				if (value > 99)
 800063c:	4b52      	ldr	r3, [pc, #328]	; (8000788 <fsm_manual+0x1f0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b63      	cmp	r3, #99	; 0x63
 8000642:	dd02      	ble.n	800064a <fsm_manual+0xb2>
				{
					value = 0;
 8000644:	4b50      	ldr	r3, [pc, #320]	; (8000788 <fsm_manual+0x1f0>)
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
				}
			}

			if (isButtonPressed(2))
 800064a:	2002      	movs	r0, #2
 800064c:	f000 f8ee 	bl	800082c <isButtonPressed>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d011      	beq.n	800067a <fsm_manual+0xe2>
			{
				temp = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
				temp = value - time_red;
 800065a:	4b4b      	ldr	r3, [pc, #300]	; (8000788 <fsm_manual+0x1f0>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	4b49      	ldr	r3, [pc, #292]	; (8000784 <fsm_manual+0x1ec>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	607b      	str	r3, [r7, #4]
				time_red = value;
 8000666:	4b48      	ldr	r3, [pc, #288]	; (8000788 <fsm_manual+0x1f0>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a46      	ldr	r2, [pc, #280]	; (8000784 <fsm_manual+0x1ec>)
 800066c:	6013      	str	r3, [r2, #0]
				time_green += temp;
 800066e:	4b48      	ldr	r3, [pc, #288]	; (8000790 <fsm_manual+0x1f8>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	4a46      	ldr	r2, [pc, #280]	; (8000790 <fsm_manual+0x1f8>)
 8000678:	6013      	str	r3, [r2, #0]

			}
			updateLED7SEGBuffer(mode, value);
 800067a:	4b41      	ldr	r3, [pc, #260]	; (8000780 <fsm_manual+0x1e8>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a42      	ldr	r2, [pc, #264]	; (8000788 <fsm_manual+0x1f0>)
 8000680:	6812      	ldr	r2, [r2, #0]
 8000682:	4611      	mov	r1, r2
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fdd5 	bl	8000234 <updateLED7SEGBuffer>
			break;
 800068a:	e075      	b.n	8000778 <fsm_manual+0x1e0>
		case SET_TIME_AMBER:
			if (isButtonPressed(0))
 800068c:	2000      	movs	r0, #0
 800068e:	f000 f8cd 	bl	800082c <isButtonPressed>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d008      	beq.n	80006aa <fsm_manual+0x112>
			{
				clear_led_red_amber_green();
 8000698:	f000 f87e 	bl	8000798 <clear_led_red_amber_green>
				value = time_green;
 800069c:	4b3c      	ldr	r3, [pc, #240]	; (8000790 <fsm_manual+0x1f8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a39      	ldr	r2, [pc, #228]	; (8000788 <fsm_manual+0x1f0>)
 80006a2:	6013      	str	r3, [r2, #0]
				mode = SET_TIME_GREEN;
 80006a4:	4b36      	ldr	r3, [pc, #216]	; (8000780 <fsm_manual+0x1e8>)
 80006a6:	220e      	movs	r2, #14
 80006a8:	601a      	str	r2, [r3, #0]
			}

			if (isButtonPressed(1))
 80006aa:	2001      	movs	r0, #1
 80006ac:	f000 f8be 	bl	800082c <isButtonPressed>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d00b      	beq.n	80006ce <fsm_manual+0x136>
			{
				value++;
 80006b6:	4b34      	ldr	r3, [pc, #208]	; (8000788 <fsm_manual+0x1f0>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	3301      	adds	r3, #1
 80006bc:	4a32      	ldr	r2, [pc, #200]	; (8000788 <fsm_manual+0x1f0>)
 80006be:	6013      	str	r3, [r2, #0]
				if (value > 99)
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <fsm_manual+0x1f0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b63      	cmp	r3, #99	; 0x63
 80006c6:	dd02      	ble.n	80006ce <fsm_manual+0x136>
				{
					value = 0;
 80006c8:	4b2f      	ldr	r3, [pc, #188]	; (8000788 <fsm_manual+0x1f0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
				}
			}

			if (isButtonPressed(2))
 80006ce:	2002      	movs	r0, #2
 80006d0:	f000 f8ac 	bl	800082c <isButtonPressed>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d003      	beq.n	80006e2 <fsm_manual+0x14a>
			{
				time_amber = value;
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <fsm_manual+0x1f0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a2b      	ldr	r2, [pc, #172]	; (800078c <fsm_manual+0x1f4>)
 80006e0:	6013      	str	r3, [r2, #0]
			}
			updateLED7SEGBuffer(mode, value);
 80006e2:	4b27      	ldr	r3, [pc, #156]	; (8000780 <fsm_manual+0x1e8>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a28      	ldr	r2, [pc, #160]	; (8000788 <fsm_manual+0x1f0>)
 80006e8:	6812      	ldr	r2, [r2, #0]
 80006ea:	4611      	mov	r1, r2
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fda1 	bl	8000234 <updateLED7SEGBuffer>
			break;
 80006f2:	e041      	b.n	8000778 <fsm_manual+0x1e0>
		case SET_TIME_GREEN:
			if (isButtonPressed(0))
 80006f4:	2000      	movs	r0, #0
 80006f6:	f000 f899 	bl	800082c <isButtonPressed>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d007      	beq.n	8000710 <fsm_manual+0x178>
			{
				clear_led_red_amber_green();
 8000700:	f000 f84a 	bl	8000798 <clear_led_red_amber_green>
				current_state = INIT;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <fsm_manual+0x1fc>)
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
				mode = NORMAL;
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <fsm_manual+0x1e8>)
 800070c:	220b      	movs	r2, #11
 800070e:	601a      	str	r2, [r3, #0]
			}

			if (isButtonPressed(1))
 8000710:	2001      	movs	r0, #1
 8000712:	f000 f88b 	bl	800082c <isButtonPressed>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d00b      	beq.n	8000734 <fsm_manual+0x19c>
			{
				value++;
 800071c:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <fsm_manual+0x1f0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	3301      	adds	r3, #1
 8000722:	4a19      	ldr	r2, [pc, #100]	; (8000788 <fsm_manual+0x1f0>)
 8000724:	6013      	str	r3, [r2, #0]
				if (value > 99)
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <fsm_manual+0x1f0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2b63      	cmp	r3, #99	; 0x63
 800072c:	dd02      	ble.n	8000734 <fsm_manual+0x19c>
				{
					value = 0;
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <fsm_manual+0x1f0>)
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
				}
			}

			if (isButtonPressed(2))
 8000734:	2002      	movs	r0, #2
 8000736:	f000 f879 	bl	800082c <isButtonPressed>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d011      	beq.n	8000764 <fsm_manual+0x1cc>
			{
				temp = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
				temp = value - time_green;
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <fsm_manual+0x1f0>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <fsm_manual+0x1f8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	607b      	str	r3, [r7, #4]
				time_green = value;
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <fsm_manual+0x1f0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <fsm_manual+0x1f8>)
 8000756:	6013      	str	r3, [r2, #0]
				time_red += temp;
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <fsm_manual+0x1ec>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4413      	add	r3, r2
 8000760:	4a08      	ldr	r2, [pc, #32]	; (8000784 <fsm_manual+0x1ec>)
 8000762:	6013      	str	r3, [r2, #0]
			}
			updateLED7SEGBuffer(mode, value);
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <fsm_manual+0x1e8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a07      	ldr	r2, [pc, #28]	; (8000788 <fsm_manual+0x1f0>)
 800076a:	6812      	ldr	r2, [r2, #0]
 800076c:	4611      	mov	r1, r2
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fd60 	bl	8000234 <updateLED7SEGBuffer>
			break;
 8000774:	e000      	b.n	8000778 <fsm_manual+0x1e0>
		default:
			break;
 8000776:	bf00      	nop
	}
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000120 	.word	0x20000120
 8000784:	20000124 	.word	0x20000124
 8000788:	2000017c 	.word	0x2000017c
 800078c:	20000128 	.word	0x20000128
 8000790:	2000012c 	.word	0x2000012c
 8000794:	20000178 	.word	0x20000178

08000798 <clear_led_red_amber_green>:
int counter_red = 5, counter_amber = 2, counter_green = 3;

int value = 0;

void clear_led_red_amber_green()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RED13_Pin | RED24_Pin | AMBER13_Pin | AMBER24_Pin  | GREEN13_Pin | GREEN24_Pin  , RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 80007a2:	4802      	ldr	r0, [pc, #8]	; (80007ac <clear_led_red_amber_green+0x14>)
 80007a4:	f000 ffb5 	bl	8001712 <HAL_GPIO_WritePin>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40010800 	.word	0x40010800

080007b0 <button_init>:
#include "main.h"

button_t button[10];

void button_init(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 10; i++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	71fb      	strb	r3, [r7, #7]
 80007ba:	e02c      	b.n	8000816 <button_init+0x66>
	{
		button[i].button_status = DISABLE;
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	4a1a      	ldr	r2, [pc, #104]	; (8000828 <button_init+0x78>)
 80007c0:	015b      	lsls	r3, r3, #5
 80007c2:	4413      	add	r3, r2
 80007c4:	330d      	adds	r3, #13
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
		button[i].button_flag = 0;
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4a16      	ldr	r2, [pc, #88]	; (8000828 <button_init+0x78>)
 80007ce:	015b      	lsls	r3, r3, #5
 80007d0:	4413      	add	r3, r2
 80007d2:	330c      	adds	r3, #12
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
		button[i].key_reg[3] = NORMAL_STATE;
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	4a13      	ldr	r2, [pc, #76]	; (8000828 <button_init+0x78>)
 80007dc:	015b      	lsls	r3, r3, #5
 80007de:	4413      	add	r3, r2
 80007e0:	331c      	adds	r3, #28
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
		button[i].key_reg[2] = NORMAL_STATE;
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <button_init+0x78>)
 80007ea:	015b      	lsls	r3, r3, #5
 80007ec:	4413      	add	r3, r2
 80007ee:	3318      	adds	r3, #24
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
		button[i].key_reg[1] = NORMAL_STATE;
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <button_init+0x78>)
 80007f8:	015b      	lsls	r3, r3, #5
 80007fa:	4413      	add	r3, r2
 80007fc:	3314      	adds	r3, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
		button[i].key_reg[0] = NORMAL_STATE;
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	4a08      	ldr	r2, [pc, #32]	; (8000828 <button_init+0x78>)
 8000806:	015b      	lsls	r3, r3, #5
 8000808:	4413      	add	r3, r2
 800080a:	3310      	adds	r3, #16
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 10; i++)
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	3301      	adds	r3, #1
 8000814:	71fb      	strb	r3, [r7, #7]
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b09      	cmp	r3, #9
 800081a:	d9cf      	bls.n	80007bc <button_init+0xc>
	}
}
 800081c:	bf00      	nop
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	20000180 	.word	0x20000180

0800082c <isButtonPressed>:

int isButtonPressed(int index)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	if (index >= 10)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b09      	cmp	r3, #9
 8000838:	dd01      	ble.n	800083e <isButtonPressed+0x12>
		return 0;
 800083a:	2300      	movs	r3, #0
 800083c:	e011      	b.n	8000862 <isButtonPressed+0x36>
	if (button[index].button_flag == 1)
 800083e:	4a0b      	ldr	r2, [pc, #44]	; (800086c <isButtonPressed+0x40>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	015b      	lsls	r3, r3, #5
 8000844:	4413      	add	r3, r2
 8000846:	330c      	adds	r3, #12
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d108      	bne.n	8000860 <isButtonPressed+0x34>
	{
		button[index].button_flag = 0;
 800084e:	4a07      	ldr	r2, [pc, #28]	; (800086c <isButtonPressed+0x40>)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	015b      	lsls	r3, r3, #5
 8000854:	4413      	add	r3, r2
 8000856:	330c      	adds	r3, #12
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
		return 1;
 800085c:	2301      	movs	r3, #1
 800085e:	e000      	b.n	8000862 <isButtonPressed+0x36>
	}
	return 0;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	20000180 	.word	0x20000180

08000870 <subKeyProcess>:

void subKeyProcess(int index)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	button[index].button_flag = 1;
 8000878:	4a05      	ldr	r2, [pc, #20]	; (8000890 <subKeyProcess+0x20>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	015b      	lsls	r3, r3, #5
 800087e:	4413      	add	r3, r2
 8000880:	330c      	adds	r3, #12
 8000882:	2201      	movs	r2, #1
 8000884:	701a      	strb	r2, [r3, #0]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	20000180 	.word	0x20000180

08000894 <set_button>:

void set_button(int index, GPIO_TypeDef *button_port, int button_pin)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
	if (index >= 10)
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2b09      	cmp	r3, #9
 80008a4:	dc14      	bgt.n	80008d0 <set_button+0x3c>
		return;
	button[index].button_port = button_port;
 80008a6:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <set_button+0x48>)
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	015b      	lsls	r3, r3, #5
 80008ac:	4413      	add	r3, r2
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	601a      	str	r2, [r3, #0]
	button[index].button_pin = button_pin;
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <set_button+0x48>)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	015b      	lsls	r3, r3, #5
 80008b8:	4413      	add	r3, r2
 80008ba:	3304      	adds	r3, #4
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	601a      	str	r2, [r3, #0]
	button[index].button_status = ENABLE;
 80008c0:	4a06      	ldr	r2, [pc, #24]	; (80008dc <set_button+0x48>)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	015b      	lsls	r3, r3, #5
 80008c6:	4413      	add	r3, r2
 80008c8:	330d      	adds	r3, #13
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]
 80008ce:	e000      	b.n	80008d2 <set_button+0x3e>
		return;
 80008d0:	bf00      	nop
}
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	20000180 	.word	0x20000180

080008e0 <getKeyInput>:

void getKeyInput(){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 10; i++)
 80008e6:	2300      	movs	r3, #0
 80008e8:	71fb      	strb	r3, [r7, #7]
 80008ea:	e09b      	b.n	8000a24 <getKeyInput+0x144>
	{
		if (button[i].button_status == DISABLE)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	4a52      	ldr	r2, [pc, #328]	; (8000a38 <getKeyInput+0x158>)
 80008f0:	015b      	lsls	r3, r3, #5
 80008f2:	4413      	add	r3, r2
 80008f4:	330d      	adds	r3, #13
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	f000 808f 	beq.w	8000a1c <getKeyInput+0x13c>
			continue;
		button[i].key_reg[2] = button[i].key_reg[1];
 80008fe:	79fa      	ldrb	r2, [r7, #7]
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	494d      	ldr	r1, [pc, #308]	; (8000a38 <getKeyInput+0x158>)
 8000904:	0152      	lsls	r2, r2, #5
 8000906:	440a      	add	r2, r1
 8000908:	3214      	adds	r2, #20
 800090a:	6812      	ldr	r2, [r2, #0]
 800090c:	494a      	ldr	r1, [pc, #296]	; (8000a38 <getKeyInput+0x158>)
 800090e:	015b      	lsls	r3, r3, #5
 8000910:	440b      	add	r3, r1
 8000912:	3318      	adds	r3, #24
 8000914:	601a      	str	r2, [r3, #0]
		button[i].key_reg[1] = button[i].key_reg[0];
 8000916:	79fa      	ldrb	r2, [r7, #7]
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4947      	ldr	r1, [pc, #284]	; (8000a38 <getKeyInput+0x158>)
 800091c:	0152      	lsls	r2, r2, #5
 800091e:	440a      	add	r2, r1
 8000920:	3210      	adds	r2, #16
 8000922:	6812      	ldr	r2, [r2, #0]
 8000924:	4944      	ldr	r1, [pc, #272]	; (8000a38 <getKeyInput+0x158>)
 8000926:	015b      	lsls	r3, r3, #5
 8000928:	440b      	add	r3, r1
 800092a:	3314      	adds	r3, #20
 800092c:	601a      	str	r2, [r3, #0]
		button[i].key_reg[0] = !HAL_GPIO_ReadPin(button[i].button_port, button[i].button_pin);
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	4a41      	ldr	r2, [pc, #260]	; (8000a38 <getKeyInput+0x158>)
 8000932:	015b      	lsls	r3, r3, #5
 8000934:	4413      	add	r3, r2
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	493f      	ldr	r1, [pc, #252]	; (8000a38 <getKeyInput+0x158>)
 800093c:	015b      	lsls	r3, r3, #5
 800093e:	440b      	add	r3, r1
 8000940:	3304      	adds	r3, #4
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	b29b      	uxth	r3, r3
 8000946:	4619      	mov	r1, r3
 8000948:	4610      	mov	r0, r2
 800094a:	f000 fecb 	bl	80016e4 <HAL_GPIO_ReadPin>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	bf0c      	ite	eq
 8000954:	2301      	moveq	r3, #1
 8000956:	2300      	movne	r3, #0
 8000958:	b2da      	uxtb	r2, r3
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	4611      	mov	r1, r2
 800095e:	4a36      	ldr	r2, [pc, #216]	; (8000a38 <getKeyInput+0x158>)
 8000960:	015b      	lsls	r3, r3, #5
 8000962:	4413      	add	r3, r2
 8000964:	3310      	adds	r3, #16
 8000966:	6019      	str	r1, [r3, #0]

		if (!(button[i].key_reg[0]|button[i].key_reg[1]|button[i].key_reg[2]))
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	4a33      	ldr	r2, [pc, #204]	; (8000a38 <getKeyInput+0x158>)
 800096c:	015b      	lsls	r3, r3, #5
 800096e:	4413      	add	r3, r2
 8000970:	3310      	adds	r3, #16
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	4930      	ldr	r1, [pc, #192]	; (8000a38 <getKeyInput+0x158>)
 8000978:	015b      	lsls	r3, r3, #5
 800097a:	440b      	add	r3, r1
 800097c:	3314      	adds	r3, #20
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	431a      	orrs	r2, r3
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	492c      	ldr	r1, [pc, #176]	; (8000a38 <getKeyInput+0x158>)
 8000986:	015b      	lsls	r3, r3, #5
 8000988:	440b      	add	r3, r1
 800098a:	3318      	adds	r3, #24
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4313      	orrs	r3, r2
 8000990:	2b00      	cmp	r3, #0
 8000992:	d10c      	bne.n	80009ae <getKeyInput+0xce>
		{
			button[i].key_reg[3] = button[i].key_reg[2];
 8000994:	79fa      	ldrb	r2, [r7, #7]
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	4927      	ldr	r1, [pc, #156]	; (8000a38 <getKeyInput+0x158>)
 800099a:	0152      	lsls	r2, r2, #5
 800099c:	440a      	add	r2, r1
 800099e:	3218      	adds	r2, #24
 80009a0:	6812      	ldr	r2, [r2, #0]
 80009a2:	4925      	ldr	r1, [pc, #148]	; (8000a38 <getKeyInput+0x158>)
 80009a4:	015b      	lsls	r3, r3, #5
 80009a6:	440b      	add	r3, r1
 80009a8:	331c      	adds	r3, #28
 80009aa:	601a      	str	r2, [r3, #0]
			continue;
 80009ac:	e037      	b.n	8000a1e <getKeyInput+0x13e>
		}

		if (button[i].key_reg[3] == 0)
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	4a21      	ldr	r2, [pc, #132]	; (8000a38 <getKeyInput+0x158>)
 80009b2:	015b      	lsls	r3, r3, #5
 80009b4:	4413      	add	r3, r2
 80009b6:	331c      	adds	r3, #28
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d112      	bne.n	80009e4 <getKeyInput+0x104>
		{
			button[i].key_reg[3] = 1;
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	4a1d      	ldr	r2, [pc, #116]	; (8000a38 <getKeyInput+0x158>)
 80009c2:	015b      	lsls	r3, r3, #5
 80009c4:	4413      	add	r3, r2
 80009c6:	331c      	adds	r3, #28
 80009c8:	2201      	movs	r2, #1
 80009ca:	601a      	str	r2, [r3, #0]
			button[i].time_out = 100;
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	4a1a      	ldr	r2, [pc, #104]	; (8000a38 <getKeyInput+0x158>)
 80009d0:	015b      	lsls	r3, r3, #5
 80009d2:	4413      	add	r3, r2
 80009d4:	3308      	adds	r3, #8
 80009d6:	2264      	movs	r2, #100	; 0x64
 80009d8:	601a      	str	r2, [r3, #0]
			subKeyProcess(i);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff47 	bl	8000870 <subKeyProcess>
 80009e2:	e01c      	b.n	8000a1e <getKeyInput+0x13e>
		}else {
			button[i].time_out--;
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	4914      	ldr	r1, [pc, #80]	; (8000a38 <getKeyInput+0x158>)
 80009e8:	015a      	lsls	r2, r3, #5
 80009ea:	440a      	add	r2, r1
 80009ec:	3208      	adds	r2, #8
 80009ee:	6812      	ldr	r2, [r2, #0]
 80009f0:	3a01      	subs	r2, #1
 80009f2:	4911      	ldr	r1, [pc, #68]	; (8000a38 <getKeyInput+0x158>)
 80009f4:	015b      	lsls	r3, r3, #5
 80009f6:	440b      	add	r3, r1
 80009f8:	3308      	adds	r3, #8
 80009fa:	601a      	str	r2, [r3, #0]
			if (button[i].time_out == 0)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <getKeyInput+0x158>)
 8000a00:	015b      	lsls	r3, r3, #5
 8000a02:	4413      	add	r3, r2
 8000a04:	3308      	adds	r3, #8
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d108      	bne.n	8000a1e <getKeyInput+0x13e>
			{
				button[i].time_out = 100;
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <getKeyInput+0x158>)
 8000a10:	015b      	lsls	r3, r3, #5
 8000a12:	4413      	add	r3, r2
 8000a14:	3308      	adds	r3, #8
 8000a16:	2264      	movs	r2, #100	; 0x64
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	e000      	b.n	8000a1e <getKeyInput+0x13e>
			continue;
 8000a1c:	bf00      	nop
	for (uint8_t i = 0; i < 10; i++)
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	3301      	adds	r3, #1
 8000a22:	71fb      	strb	r3, [r7, #7]
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	2b09      	cmp	r3, #9
 8000a28:	f67f af60 	bls.w	80008ec <getKeyInput+0xc>
			}
		}
	}
}
 8000a2c:	bf00      	nop
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000180 	.word	0x20000180

08000a3c <led_red_and_green>:
#include "global.h"
#include "display7SEG.h"
#include "light_traffic.h"

void led_red_and_green(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED13_GPIO_Port, RED13_Pin, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <led_red_and_green+0x20>)
 8000a46:	f000 fe64 	bl	8001712 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN24_GPIO_Port, GREEN24_Pin, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <led_red_and_green+0x20>)
 8000a52:	f000 fe5e 	bl	8001712 <HAL_GPIO_WritePin>
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40010800 	.word	0x40010800

08000a60 <led_red_and_yellow>:

void led_red_and_yellow(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED13_GPIO_Port, RED13_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2180      	movs	r1, #128	; 0x80
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <led_red_and_yellow+0x20>)
 8000a6a:	f000 fe52 	bl	8001712 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER24_GPIO_Port, AMBER24_Pin, GPIO_PIN_SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <led_red_and_yellow+0x20>)
 8000a76:	f000 fe4c 	bl	8001712 <HAL_GPIO_WritePin>
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40010800 	.word	0x40010800

08000a84 <led_yellow_and_red>:

void led_yellow_and_red(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AMBER13_GPIO_Port, AMBER13_Pin, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <led_yellow_and_red+0x20>)
 8000a90:	f000 fe3f 	bl	8001712 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED24_GPIO_Port, RED24_Pin, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9a:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <led_yellow_and_red+0x20>)
 8000a9c:	f000 fe39 	bl	8001712 <HAL_GPIO_WritePin>
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40010800 	.word	0x40010800

08000aa8 <led_green_and_red>:

void led_green_and_red(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN13_GPIO_Port, GREEN13_Pin, GPIO_PIN_SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <led_green_and_red+0x20>)
 8000ab4:	f000 fe2d 	bl	8001712 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED24_GPIO_Port, RED24_Pin, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000abe:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <led_green_and_red+0x20>)
 8000ac0:	f000 fe27 	bl	8001712 <HAL_GPIO_WritePin>
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40010800 	.word	0x40010800

08000acc <updateTrafficLight>:


void updateTrafficLight(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	clear_led_red_amber_green();
 8000ad0:	f7ff fe62 	bl	8000798 <clear_led_red_amber_green>
	switch (current_state) {
 8000ad4:	4b5a      	ldr	r3, [pc, #360]	; (8000c40 <updateTrafficLight+0x174>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b04      	cmp	r3, #4
 8000ada:	f200 80a3 	bhi.w	8000c24 <updateTrafficLight+0x158>
 8000ade:	a201      	add	r2, pc, #4	; (adr r2, 8000ae4 <updateTrafficLight+0x18>)
 8000ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae4:	08000af9 	.word	0x08000af9
 8000ae8:	08000b6b 	.word	0x08000b6b
 8000aec:	08000b1b 	.word	0x08000b1b
 8000af0:	08000bed 	.word	0x08000bed
 8000af4:	08000ba3 	.word	0x08000ba3
		case INIT:
			updateLED7SEGBuffer(0, 0);
 8000af8:	2100      	movs	r1, #0
 8000afa:	2000      	movs	r0, #0
 8000afc:	f7ff fb9a 	bl	8000234 <updateLED7SEGBuffer>
			//HAL_GPIO_WritePin(GPIOA, RED13_Pin | RED24_Pin | AMBER13_Pin | AMBER24_Pin  | GREEN13_Pin | GREEN24_Pin  , SET);
			counter_red = time_red;
 8000b00:	4b50      	ldr	r3, [pc, #320]	; (8000c44 <updateTrafficLight+0x178>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a50      	ldr	r2, [pc, #320]	; (8000c48 <updateTrafficLight+0x17c>)
 8000b06:	6013      	str	r3, [r2, #0]
			counter_amber = time_amber;
 8000b08:	4b50      	ldr	r3, [pc, #320]	; (8000c4c <updateTrafficLight+0x180>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a50      	ldr	r2, [pc, #320]	; (8000c50 <updateTrafficLight+0x184>)
 8000b0e:	6013      	str	r3, [r2, #0]
			counter_green = time_green;
 8000b10:	4b50      	ldr	r3, [pc, #320]	; (8000c54 <updateTrafficLight+0x188>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a50      	ldr	r2, [pc, #320]	; (8000c58 <updateTrafficLight+0x18c>)
 8000b16:	6013      	str	r3, [r2, #0]
			break;
 8000b18:	e08b      	b.n	8000c32 <updateTrafficLight+0x166>
		case RED13_AMBER24:
			updateLED7SEGBuffer(counter_red, counter_amber);
 8000b1a:	4b4b      	ldr	r3, [pc, #300]	; (8000c48 <updateTrafficLight+0x17c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a4c      	ldr	r2, [pc, #304]	; (8000c50 <updateTrafficLight+0x184>)
 8000b20:	6812      	ldr	r2, [r2, #0]
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fb85 	bl	8000234 <updateLED7SEGBuffer>
			counter_amber--;
 8000b2a:	4b49      	ldr	r3, [pc, #292]	; (8000c50 <updateTrafficLight+0x184>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	4a47      	ldr	r2, [pc, #284]	; (8000c50 <updateTrafficLight+0x184>)
 8000b32:	6013      	str	r3, [r2, #0]
			counter_red--;
 8000b34:	4b44      	ldr	r3, [pc, #272]	; (8000c48 <updateTrafficLight+0x17c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	4a43      	ldr	r2, [pc, #268]	; (8000c48 <updateTrafficLight+0x17c>)
 8000b3c:	6013      	str	r3, [r2, #0]
			if (counter_amber == 0)
 8000b3e:	4b44      	ldr	r3, [pc, #272]	; (8000c50 <updateTrafficLight+0x184>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d10e      	bne.n	8000b64 <updateTrafficLight+0x98>
			{
				counter_red = time_red;
 8000b46:	4b3f      	ldr	r3, [pc, #252]	; (8000c44 <updateTrafficLight+0x178>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a3f      	ldr	r2, [pc, #252]	; (8000c48 <updateTrafficLight+0x17c>)
 8000b4c:	6013      	str	r3, [r2, #0]
				counter_amber = time_amber;
 8000b4e:	4b3f      	ldr	r3, [pc, #252]	; (8000c4c <updateTrafficLight+0x180>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a3f      	ldr	r2, [pc, #252]	; (8000c50 <updateTrafficLight+0x184>)
 8000b54:	6013      	str	r3, [r2, #0]
				counter_green = time_green;
 8000b56:	4b3f      	ldr	r3, [pc, #252]	; (8000c54 <updateTrafficLight+0x188>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a3f      	ldr	r2, [pc, #252]	; (8000c58 <updateTrafficLight+0x18c>)
 8000b5c:	6013      	str	r3, [r2, #0]
				state = GREEN13_RED24;
 8000b5e:	4b3f      	ldr	r3, [pc, #252]	; (8000c5c <updateTrafficLight+0x190>)
 8000b60:	2203      	movs	r2, #3
 8000b62:	601a      	str	r2, [r3, #0]
			}
			led_red_and_yellow();
 8000b64:	f7ff ff7c 	bl	8000a60 <led_red_and_yellow>
			break;
 8000b68:	e063      	b.n	8000c32 <updateTrafficLight+0x166>
		case RED13_GREEN24:
			updateLED7SEGBuffer(counter_red, counter_green);
 8000b6a:	4b37      	ldr	r3, [pc, #220]	; (8000c48 <updateTrafficLight+0x17c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a3a      	ldr	r2, [pc, #232]	; (8000c58 <updateTrafficLight+0x18c>)
 8000b70:	6812      	ldr	r2, [r2, #0]
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fb5d 	bl	8000234 <updateLED7SEGBuffer>
			led_red_and_green();
 8000b7a:	f7ff ff5f 	bl	8000a3c <led_red_and_green>
			counter_red--;
 8000b7e:	4b32      	ldr	r3, [pc, #200]	; (8000c48 <updateTrafficLight+0x17c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	4a30      	ldr	r2, [pc, #192]	; (8000c48 <updateTrafficLight+0x17c>)
 8000b86:	6013      	str	r3, [r2, #0]
			counter_green--;
 8000b88:	4b33      	ldr	r3, [pc, #204]	; (8000c58 <updateTrafficLight+0x18c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	4a32      	ldr	r2, [pc, #200]	; (8000c58 <updateTrafficLight+0x18c>)
 8000b90:	6013      	str	r3, [r2, #0]
			if (counter_green == 0)
 8000b92:	4b31      	ldr	r3, [pc, #196]	; (8000c58 <updateTrafficLight+0x18c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d146      	bne.n	8000c28 <updateTrafficLight+0x15c>
			{
				state = RED13_AMBER24;
 8000b9a:	4b30      	ldr	r3, [pc, #192]	; (8000c5c <updateTrafficLight+0x190>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000ba0:	e042      	b.n	8000c28 <updateTrafficLight+0x15c>
		case AMBER13_RED24:
			updateLED7SEGBuffer(counter_amber, counter_red);
 8000ba2:	4b2b      	ldr	r3, [pc, #172]	; (8000c50 <updateTrafficLight+0x184>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a28      	ldr	r2, [pc, #160]	; (8000c48 <updateTrafficLight+0x17c>)
 8000ba8:	6812      	ldr	r2, [r2, #0]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fb41 	bl	8000234 <updateLED7SEGBuffer>
			led_yellow_and_red();
 8000bb2:	f7ff ff67 	bl	8000a84 <led_yellow_and_red>
			counter_amber--;
 8000bb6:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <updateTrafficLight+0x184>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	4a24      	ldr	r2, [pc, #144]	; (8000c50 <updateTrafficLight+0x184>)
 8000bbe:	6013      	str	r3, [r2, #0]
			counter_red--;
 8000bc0:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <updateTrafficLight+0x17c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	4a20      	ldr	r2, [pc, #128]	; (8000c48 <updateTrafficLight+0x17c>)
 8000bc8:	6013      	str	r3, [r2, #0]
			if (counter_amber == 0)
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <updateTrafficLight+0x184>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d12c      	bne.n	8000c2c <updateTrafficLight+0x160>
			{
				counter_red = 5;
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <updateTrafficLight+0x17c>)
 8000bd4:	2205      	movs	r2, #5
 8000bd6:	601a      	str	r2, [r3, #0]
				counter_green = 3;
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <updateTrafficLight+0x18c>)
 8000bda:	2203      	movs	r2, #3
 8000bdc:	601a      	str	r2, [r3, #0]
				counter_amber = 2;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <updateTrafficLight+0x184>)
 8000be0:	2202      	movs	r2, #2
 8000be2:	601a      	str	r2, [r3, #0]
				state = RED13_GREEN24;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <updateTrafficLight+0x190>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	601a      	str	r2, [r3, #0]
			}
			break;
 8000bea:	e01f      	b.n	8000c2c <updateTrafficLight+0x160>
		case GREEN13_RED24:
			updateLED7SEGBuffer(counter_green, counter_red);
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <updateTrafficLight+0x18c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a15      	ldr	r2, [pc, #84]	; (8000c48 <updateTrafficLight+0x17c>)
 8000bf2:	6812      	ldr	r2, [r2, #0]
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fb1c 	bl	8000234 <updateLED7SEGBuffer>
			led_green_and_red();
 8000bfc:	f7ff ff54 	bl	8000aa8 <led_green_and_red>
			counter_red--;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <updateTrafficLight+0x17c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	4a10      	ldr	r2, [pc, #64]	; (8000c48 <updateTrafficLight+0x17c>)
 8000c08:	6013      	str	r3, [r2, #0]
			counter_green--;
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <updateTrafficLight+0x18c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	4a11      	ldr	r2, [pc, #68]	; (8000c58 <updateTrafficLight+0x18c>)
 8000c12:	6013      	str	r3, [r2, #0]
			if (counter_green == 0)
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <updateTrafficLight+0x18c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d109      	bne.n	8000c30 <updateTrafficLight+0x164>
			{
				state = AMBER13_RED24;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <updateTrafficLight+0x190>)
 8000c1e:	2204      	movs	r2, #4
 8000c20:	601a      	str	r2, [r3, #0]
			}
			break;
 8000c22:	e005      	b.n	8000c30 <updateTrafficLight+0x164>
		default:
			break;
 8000c24:	bf00      	nop
 8000c26:	e004      	b.n	8000c32 <updateTrafficLight+0x166>
			break;
 8000c28:	bf00      	nop
 8000c2a:	e002      	b.n	8000c32 <updateTrafficLight+0x166>
			break;
 8000c2c:	bf00      	nop
 8000c2e:	e000      	b.n	8000c32 <updateTrafficLight+0x166>
			break;
 8000c30:	bf00      	nop
	}
	current_state = state;
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <updateTrafficLight+0x190>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a02      	ldr	r2, [pc, #8]	; (8000c40 <updateTrafficLight+0x174>)
 8000c38:	6013      	str	r3, [r2, #0]
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000178 	.word	0x20000178
 8000c44:	20000124 	.word	0x20000124
 8000c48:	20000130 	.word	0x20000130
 8000c4c:	20000128 	.word	0x20000128
 8000c50:	20000134 	.word	0x20000134
 8000c54:	2000012c 	.word	0x2000012c
 8000c58:	20000138 	.word	0x20000138
 8000c5c:	2000011c 	.word	0x2000011c

08000c60 <HAL_TIM_PeriodElapsedCallback>:
/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	runTimer();
 8000c68:	f000 f95c 	bl	8000f24 <runTimer>
	getKeyInput();
 8000c6c:	f7ff fe38 	bl	80008e0 <getKeyInput>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7c:	f000 fa46 	bl	800110c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c80:	f000 f832 	bl	8000ce8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c84:	f000 f8b8 	bl	8000df8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c88:	f000 f86a 	bl	8000d60 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	setTimer(TIMER_LIGHT_TRAFFIC, TIMER_LIGHT_TRAFFIC_DUR);
 8000c8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c90:	2000      	movs	r0, #0
 8000c92:	f000 f927 	bl	8000ee4 <setTimer>
  	setTimer(TIMER_UPDATE_7SEG, TIMER_UPDATE_7SEG_DUR);
 8000c96:	21fa      	movs	r1, #250	; 0xfa
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f000 f923 	bl	8000ee4 <setTimer>
  	button_init();
 8000c9e:	f7ff fd87 	bl	80007b0 <button_init>
  	set_button(0, BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000ca2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ca6:	490e      	ldr	r1, [pc, #56]	; (8000ce0 <main+0x68>)
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f7ff fdf3 	bl	8000894 <set_button>
  	set_button(1, BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000cae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cb2:	490b      	ldr	r1, [pc, #44]	; (8000ce0 <main+0x68>)
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f7ff fded 	bl	8000894 <set_button>
  	set_button(2, BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000cba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <main+0x68>)
 8000cc0:	2002      	movs	r0, #2
 8000cc2:	f7ff fde7 	bl	8000894 <set_button>
  	HAL_TIM_Base_Start_IT(&htim2);
 8000cc6:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <main+0x6c>)
 8000cc8:	f001 f96a 	bl	8001fa0 <HAL_TIM_Base_Start_IT>
  	clear_led_red_amber_green();
 8000ccc:	f7ff fd64 	bl	8000798 <clear_led_red_amber_green>
  	updateTrafficLight();
 8000cd0:	f7ff fefc 	bl	8000acc <updateTrafficLight>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_auto();
 8000cd4:	f7ff fb7c 	bl	80003d0 <fsm_auto>
	  fsm_manual();
 8000cd8:	f7ff fc5e 	bl	8000598 <fsm_manual>
	  fsm_auto();
 8000cdc:	e7fa      	b.n	8000cd4 <main+0x5c>
 8000cde:	bf00      	nop
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	200002c0 	.word	0x200002c0

08000ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b090      	sub	sp, #64	; 0x40
 8000cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cee:	f107 0318 	add.w	r3, r7, #24
 8000cf2:	2228      	movs	r2, #40	; 0x28
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 fcde 	bl	80026b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d12:	2310      	movs	r3, #16
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1a:	f107 0318 	add.w	r3, r7, #24
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 fd10 	bl	8001744 <HAL_RCC_OscConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d2a:	f000 f8d5 	bl	8000ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2e:	230f      	movs	r3, #15
 8000d30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 ff7e 	bl	8001c48 <HAL_RCC_ClockConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d52:	f000 f8c1 	bl	8000ed8 <Error_Handler>
  }
}
 8000d56:	bf00      	nop
 8000d58:	3740      	adds	r7, #64	; 0x40
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d74:	463b      	mov	r3, r7
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <MX_TIM2_Init+0x94>)
 8000d7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <MX_TIM2_Init+0x94>)
 8000d86:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8c:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <MX_TIM2_Init+0x94>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <MX_TIM2_Init+0x94>)
 8000d94:	2209      	movs	r2, #9
 8000d96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <MX_TIM2_Init+0x94>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <MX_TIM2_Init+0x94>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000da4:	4813      	ldr	r0, [pc, #76]	; (8000df4 <MX_TIM2_Init+0x94>)
 8000da6:	f001 f8ab 	bl	8001f00 <HAL_TIM_Base_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000db0:	f000 f892 	bl	8000ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <MX_TIM2_Init+0x94>)
 8000dc2:	f001 fa29 	bl	8002218 <HAL_TIM_ConfigClockSource>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000dcc:	f000 f884 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_TIM2_Init+0x94>)
 8000dde:	f001 fc01 	bl	80025e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000de8:	f000 f876 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200002c0 	.word	0x200002c0

08000df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfe:	f107 0310 	add.w	r3, r7, #16
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0c:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <MX_GPIO_Init+0xd0>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a2d      	ldr	r2, [pc, #180]	; (8000ec8 <MX_GPIO_Init+0xd0>)
 8000e12:	f043 0310 	orr.w	r3, r3, #16
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <MX_GPIO_Init+0xd0>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0310 	and.w	r3, r3, #16
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <MX_GPIO_Init+0xd0>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a27      	ldr	r2, [pc, #156]	; (8000ec8 <MX_GPIO_Init+0xd0>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <MX_GPIO_Init+0xd0>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3c:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <MX_GPIO_Init+0xd0>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a21      	ldr	r2, [pc, #132]	; (8000ec8 <MX_GPIO_Init+0xd0>)
 8000e42:	f043 0308 	orr.w	r3, r3, #8
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <MX_GPIO_Init+0xd0>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0308 	and.w	r3, r3, #8
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin
 8000e54:	2200      	movs	r2, #0
 8000e56:	f641 71f8 	movw	r1, #8184	; 0x1ff8
 8000e5a:	481c      	ldr	r0, [pc, #112]	; (8000ecc <MX_GPIO_Init+0xd4>)
 8000e5c:	f000 fc59 	bl	8001712 <HAL_GPIO_WritePin>
                          |RED13_Pin|RED24_Pin|AMBER13_Pin|AMBER24_Pin
                          |GREEN13_Pin|GREEN24_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|D_Pin
 8000e60:	2200      	movs	r2, #0
 8000e62:	217f      	movs	r1, #127	; 0x7f
 8000e64:	481a      	ldr	r0, [pc, #104]	; (8000ed0 <MX_GPIO_Init+0xd8>)
 8000e66:	f000 fc54 	bl	8001712 <HAL_GPIO_WritePin>
                          |E_Pin|F_Pin|G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000e6a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4815      	ldr	r0, [pc, #84]	; (8000ed4 <MX_GPIO_Init+0xdc>)
 8000e80:	f000 fab4 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin EN4_Pin
                           RED13_Pin RED24_Pin AMBER13_Pin AMBER24_Pin
                           GREEN13_Pin GREEN24_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin
 8000e84:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 8000e88:	613b      	str	r3, [r7, #16]
                          |RED13_Pin|RED24_Pin|AMBER13_Pin|AMBER24_Pin
                          |GREEN13_Pin|GREEN24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2302      	movs	r3, #2
 8000e94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0310 	add.w	r3, r7, #16
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480b      	ldr	r0, [pc, #44]	; (8000ecc <MX_GPIO_Init+0xd4>)
 8000e9e:	f000 faa5 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D_Pin
                           E_Pin F_Pin G_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D_Pin
 8000ea2:	237f      	movs	r3, #127	; 0x7f
 8000ea4:	613b      	str	r3, [r7, #16]
                          |E_Pin|F_Pin|G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_GPIO_Init+0xd8>)
 8000eba:	f000 fa97 	bl	80013ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ebe:	bf00      	nop
 8000ec0:	3720      	adds	r7, #32
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40010800 	.word	0x40010800
 8000ed0:	40010c00 	.word	0x40010c00
 8000ed4:	40011000 	.word	0x40011000

08000ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <Error_Handler+0x8>
	...

08000ee4 <setTimer>:

int timer_counter[10] = {0};
int timer_flag[10] = {0};

void setTimer(int pos, int duration)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	timer_counter[pos] = duration/TIMER_CYCLE;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	4a09      	ldr	r2, [pc, #36]	; (8000f18 <setTimer+0x34>)
 8000ef2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef6:	1092      	asrs	r2, r2, #2
 8000ef8:	17db      	asrs	r3, r3, #31
 8000efa:	1ad2      	subs	r2, r2, r3
 8000efc:	4907      	ldr	r1, [pc, #28]	; (8000f1c <setTimer+0x38>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[pos] = 0;
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <setTimer+0x3c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	66666667 	.word	0x66666667
 8000f1c:	20000308 	.word	0x20000308
 8000f20:	20000330 	.word	0x20000330

08000f24 <runTimer>:

void runTimer()
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	e01b      	b.n	8000f68 <runTimer+0x44>
	{
		timer_counter[i]--;
 8000f30:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <runTimer+0x58>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f38:	1e5a      	subs	r2, r3, #1
 8000f3a:	4910      	ldr	r1, [pc, #64]	; (8000f7c <runTimer+0x58>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (timer_counter[i] <= 0)
 8000f42:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <runTimer+0x58>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	dc09      	bgt.n	8000f62 <runTimer+0x3e>
		{
			timer_flag[i] = 1;
 8000f4e:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <runTimer+0x5c>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2101      	movs	r1, #1
 8000f54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			timer_counter[i] = 0;
 8000f58:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <runTimer+0x58>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3301      	adds	r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b09      	cmp	r3, #9
 8000f6c:	dde0      	ble.n	8000f30 <runTimer+0xc>
		}
	}
}
 8000f6e:	bf00      	nop
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000308 	.word	0x20000308
 8000f80:	20000330 	.word	0x20000330

08000f84 <getTimerFlag>:

int getTimerFlag(int pos)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	return timer_flag[pos];
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <getTimerFlag+0x1c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000330 	.word	0x20000330

08000fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_MspInit+0x5c>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	4a14      	ldr	r2, [pc, #80]	; (8001000 <HAL_MspInit+0x5c>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6193      	str	r3, [r2, #24]
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_MspInit+0x5c>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <HAL_MspInit+0x5c>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <HAL_MspInit+0x5c>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	61d3      	str	r3, [r2, #28]
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <HAL_MspInit+0x5c>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_MspInit+0x60>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_MspInit+0x60>)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	40021000 	.word	0x40021000
 8001004:	40010000 	.word	0x40010000

08001008 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001018:	d113      	bne.n	8001042 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_TIM_Base_MspInit+0x44>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <HAL_TIM_Base_MspInit+0x44>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_TIM_Base_MspInit+0x44>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	201c      	movs	r0, #28
 8001038:	f000 f9a1 	bl	800137e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800103c:	201c      	movs	r0, #28
 800103e:	f000 f9ba 	bl	80013b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40021000 	.word	0x40021000

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001054:	e7fe      	b.n	8001054 <NMI_Handler+0x4>

08001056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <MemManage_Handler+0x4>

08001062 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler+0x4>

0800106e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr

0800107a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr

08001086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr

08001092 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001096:	f000 f87f 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <TIM2_IRQHandler+0x10>)
 80010a6:	f000 ffc7 	bl	8002038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200002c0 	.word	0x200002c0

080010b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c0:	f7ff fff8 	bl	80010b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c4:	480b      	ldr	r0, [pc, #44]	; (80010f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010c6:	490c      	ldr	r1, [pc, #48]	; (80010f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010c8:	4a0c      	ldr	r2, [pc, #48]	; (80010fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a09      	ldr	r2, [pc, #36]	; (8001100 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010dc:	4c09      	ldr	r4, [pc, #36]	; (8001104 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ea:	f001 faed 	bl	80026c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ee:	f7ff fdc3 	bl	8000c78 <main>
  bx lr
 80010f2:	4770      	bx	lr
  ldr r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f8:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 80010fc:	08002754 	.word	0x08002754
  ldr r2, =_sbss
 8001100:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 8001104:	2000035c 	.word	0x2000035c

08001108 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001108:	e7fe      	b.n	8001108 <ADC1_2_IRQHandler>
	...

0800110c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <HAL_Init+0x28>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a07      	ldr	r2, [pc, #28]	; (8001134 <HAL_Init+0x28>)
 8001116:	f043 0310 	orr.w	r3, r3, #16
 800111a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111c:	2003      	movs	r0, #3
 800111e:	f000 f923 	bl	8001368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001122:	200f      	movs	r0, #15
 8001124:	f000 f808 	bl	8001138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001128:	f7ff ff3c 	bl	8000fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40022000 	.word	0x40022000

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_InitTick+0x54>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x58>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f93b 	bl	80013d2 <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f000 f903 	bl	800137e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	; (8001194 <HAL_InitTick+0x5c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	2000013c 	.word	0x2000013c
 8001190:	20000144 	.word	0x20000144
 8001194:	20000140 	.word	0x20000140

08001198 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <HAL_IncTick+0x1c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_IncTick+0x20>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a03      	ldr	r2, [pc, #12]	; (80011b8 <HAL_IncTick+0x20>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	20000144 	.word	0x20000144
 80011b8:	20000358 	.word	0x20000358

080011bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b02      	ldr	r3, [pc, #8]	; (80011cc <HAL_GetTick+0x10>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	20000358 	.word	0x20000358

080011d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001202:	4a04      	ldr	r2, [pc, #16]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60d3      	str	r3, [r2, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <__NVIC_GetPriorityGrouping+0x18>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0307 	and.w	r3, r3, #7
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	2b00      	cmp	r3, #0
 8001244:	db0b      	blt.n	800125e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f003 021f 	and.w	r2, r3, #31
 800124c:	4906      	ldr	r1, [pc, #24]	; (8001268 <__NVIC_EnableIRQ+0x34>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	2001      	movs	r0, #1
 8001256:	fa00 f202 	lsl.w	r2, r0, r2
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	; (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001334:	d301      	bcc.n	800133a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001336:	2301      	movs	r3, #1
 8001338:	e00f      	b.n	800135a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <SysTick_Config+0x40>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001342:	210f      	movs	r1, #15
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f7ff ff90 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <SysTick_Config+0x40>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <SysTick_Config+0x40>)
 8001354:	2207      	movs	r2, #7
 8001356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff2d 	bl	80011d0 <__NVIC_SetPriorityGrouping>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff42 	bl	8001218 <__NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff90 	bl	80012c0 <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff5f 	bl	800126c <__NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff35 	bl	8001234 <__NVIC_EnableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffa2 	bl	8001324 <SysTick_Config>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b08b      	sub	sp, #44	; 0x2c
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fe:	e161      	b.n	80016c4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001400:	2201      	movs	r2, #1
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	69fa      	ldr	r2, [r7, #28]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	429a      	cmp	r2, r3
 800141a:	f040 8150 	bne.w	80016be <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4a97      	ldr	r2, [pc, #604]	; (8001680 <HAL_GPIO_Init+0x294>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d05e      	beq.n	80014e6 <HAL_GPIO_Init+0xfa>
 8001428:	4a95      	ldr	r2, [pc, #596]	; (8001680 <HAL_GPIO_Init+0x294>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d875      	bhi.n	800151a <HAL_GPIO_Init+0x12e>
 800142e:	4a95      	ldr	r2, [pc, #596]	; (8001684 <HAL_GPIO_Init+0x298>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d058      	beq.n	80014e6 <HAL_GPIO_Init+0xfa>
 8001434:	4a93      	ldr	r2, [pc, #588]	; (8001684 <HAL_GPIO_Init+0x298>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d86f      	bhi.n	800151a <HAL_GPIO_Init+0x12e>
 800143a:	4a93      	ldr	r2, [pc, #588]	; (8001688 <HAL_GPIO_Init+0x29c>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d052      	beq.n	80014e6 <HAL_GPIO_Init+0xfa>
 8001440:	4a91      	ldr	r2, [pc, #580]	; (8001688 <HAL_GPIO_Init+0x29c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d869      	bhi.n	800151a <HAL_GPIO_Init+0x12e>
 8001446:	4a91      	ldr	r2, [pc, #580]	; (800168c <HAL_GPIO_Init+0x2a0>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d04c      	beq.n	80014e6 <HAL_GPIO_Init+0xfa>
 800144c:	4a8f      	ldr	r2, [pc, #572]	; (800168c <HAL_GPIO_Init+0x2a0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d863      	bhi.n	800151a <HAL_GPIO_Init+0x12e>
 8001452:	4a8f      	ldr	r2, [pc, #572]	; (8001690 <HAL_GPIO_Init+0x2a4>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d046      	beq.n	80014e6 <HAL_GPIO_Init+0xfa>
 8001458:	4a8d      	ldr	r2, [pc, #564]	; (8001690 <HAL_GPIO_Init+0x2a4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d85d      	bhi.n	800151a <HAL_GPIO_Init+0x12e>
 800145e:	2b12      	cmp	r3, #18
 8001460:	d82a      	bhi.n	80014b8 <HAL_GPIO_Init+0xcc>
 8001462:	2b12      	cmp	r3, #18
 8001464:	d859      	bhi.n	800151a <HAL_GPIO_Init+0x12e>
 8001466:	a201      	add	r2, pc, #4	; (adr r2, 800146c <HAL_GPIO_Init+0x80>)
 8001468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146c:	080014e7 	.word	0x080014e7
 8001470:	080014c1 	.word	0x080014c1
 8001474:	080014d3 	.word	0x080014d3
 8001478:	08001515 	.word	0x08001515
 800147c:	0800151b 	.word	0x0800151b
 8001480:	0800151b 	.word	0x0800151b
 8001484:	0800151b 	.word	0x0800151b
 8001488:	0800151b 	.word	0x0800151b
 800148c:	0800151b 	.word	0x0800151b
 8001490:	0800151b 	.word	0x0800151b
 8001494:	0800151b 	.word	0x0800151b
 8001498:	0800151b 	.word	0x0800151b
 800149c:	0800151b 	.word	0x0800151b
 80014a0:	0800151b 	.word	0x0800151b
 80014a4:	0800151b 	.word	0x0800151b
 80014a8:	0800151b 	.word	0x0800151b
 80014ac:	0800151b 	.word	0x0800151b
 80014b0:	080014c9 	.word	0x080014c9
 80014b4:	080014dd 	.word	0x080014dd
 80014b8:	4a76      	ldr	r2, [pc, #472]	; (8001694 <HAL_GPIO_Init+0x2a8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d013      	beq.n	80014e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014be:	e02c      	b.n	800151a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	623b      	str	r3, [r7, #32]
          break;
 80014c6:	e029      	b.n	800151c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	3304      	adds	r3, #4
 80014ce:	623b      	str	r3, [r7, #32]
          break;
 80014d0:	e024      	b.n	800151c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	3308      	adds	r3, #8
 80014d8:	623b      	str	r3, [r7, #32]
          break;
 80014da:	e01f      	b.n	800151c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	330c      	adds	r3, #12
 80014e2:	623b      	str	r3, [r7, #32]
          break;
 80014e4:	e01a      	b.n	800151c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d102      	bne.n	80014f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ee:	2304      	movs	r3, #4
 80014f0:	623b      	str	r3, [r7, #32]
          break;
 80014f2:	e013      	b.n	800151c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d105      	bne.n	8001508 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014fc:	2308      	movs	r3, #8
 80014fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	611a      	str	r2, [r3, #16]
          break;
 8001506:	e009      	b.n	800151c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001508:	2308      	movs	r3, #8
 800150a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	615a      	str	r2, [r3, #20]
          break;
 8001512:	e003      	b.n	800151c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
          break;
 8001518:	e000      	b.n	800151c <HAL_GPIO_Init+0x130>
          break;
 800151a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	2bff      	cmp	r3, #255	; 0xff
 8001520:	d801      	bhi.n	8001526 <HAL_GPIO_Init+0x13a>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	e001      	b.n	800152a <HAL_GPIO_Init+0x13e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3304      	adds	r3, #4
 800152a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2bff      	cmp	r3, #255	; 0xff
 8001530:	d802      	bhi.n	8001538 <HAL_GPIO_Init+0x14c>
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	e002      	b.n	800153e <HAL_GPIO_Init+0x152>
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	3b08      	subs	r3, #8
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	210f      	movs	r1, #15
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	fa01 f303 	lsl.w	r3, r1, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	401a      	ands	r2, r3
 8001550:	6a39      	ldr	r1, [r7, #32]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	431a      	orrs	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 80a9 	beq.w	80016be <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800156c:	4b4a      	ldr	r3, [pc, #296]	; (8001698 <HAL_GPIO_Init+0x2ac>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a49      	ldr	r2, [pc, #292]	; (8001698 <HAL_GPIO_Init+0x2ac>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b47      	ldr	r3, [pc, #284]	; (8001698 <HAL_GPIO_Init+0x2ac>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001584:	4a45      	ldr	r2, [pc, #276]	; (800169c <HAL_GPIO_Init+0x2b0>)
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	3302      	adds	r3, #2
 800158c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001590:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	220f      	movs	r2, #15
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	4013      	ands	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a3d      	ldr	r2, [pc, #244]	; (80016a0 <HAL_GPIO_Init+0x2b4>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d00d      	beq.n	80015cc <HAL_GPIO_Init+0x1e0>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a3c      	ldr	r2, [pc, #240]	; (80016a4 <HAL_GPIO_Init+0x2b8>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d007      	beq.n	80015c8 <HAL_GPIO_Init+0x1dc>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a3b      	ldr	r2, [pc, #236]	; (80016a8 <HAL_GPIO_Init+0x2bc>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d101      	bne.n	80015c4 <HAL_GPIO_Init+0x1d8>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e004      	b.n	80015ce <HAL_GPIO_Init+0x1e2>
 80015c4:	2303      	movs	r3, #3
 80015c6:	e002      	b.n	80015ce <HAL_GPIO_Init+0x1e2>
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <HAL_GPIO_Init+0x1e2>
 80015cc:	2300      	movs	r3, #0
 80015ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d0:	f002 0203 	and.w	r2, r2, #3
 80015d4:	0092      	lsls	r2, r2, #2
 80015d6:	4093      	lsls	r3, r2
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	4313      	orrs	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015de:	492f      	ldr	r1, [pc, #188]	; (800169c <HAL_GPIO_Init+0x2b0>)
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	089b      	lsrs	r3, r3, #2
 80015e4:	3302      	adds	r3, #2
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d006      	beq.n	8001606 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015f8:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	492b      	ldr	r1, [pc, #172]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	608b      	str	r3, [r1, #8]
 8001604:	e006      	b.n	8001614 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001606:	4b29      	ldr	r3, [pc, #164]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	43db      	mvns	r3, r3
 800160e:	4927      	ldr	r1, [pc, #156]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001610:	4013      	ands	r3, r2
 8001612:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d006      	beq.n	800162e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001620:	4b22      	ldr	r3, [pc, #136]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	4921      	ldr	r1, [pc, #132]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	60cb      	str	r3, [r1, #12]
 800162c:	e006      	b.n	800163c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	43db      	mvns	r3, r3
 8001636:	491d      	ldr	r1, [pc, #116]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001638:	4013      	ands	r3, r2
 800163a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	4917      	ldr	r1, [pc, #92]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
 8001654:	e006      	b.n	8001664 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	43db      	mvns	r3, r3
 800165e:	4913      	ldr	r1, [pc, #76]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001660:	4013      	ands	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d01f      	beq.n	80016b0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	490d      	ldr	r1, [pc, #52]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]
 800167c:	e01f      	b.n	80016be <HAL_GPIO_Init+0x2d2>
 800167e:	bf00      	nop
 8001680:	10320000 	.word	0x10320000
 8001684:	10310000 	.word	0x10310000
 8001688:	10220000 	.word	0x10220000
 800168c:	10210000 	.word	0x10210000
 8001690:	10120000 	.word	0x10120000
 8001694:	10110000 	.word	0x10110000
 8001698:	40021000 	.word	0x40021000
 800169c:	40010000 	.word	0x40010000
 80016a0:	40010800 	.word	0x40010800
 80016a4:	40010c00 	.word	0x40010c00
 80016a8:	40011000 	.word	0x40011000
 80016ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_GPIO_Init+0x2f4>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	4909      	ldr	r1, [pc, #36]	; (80016e0 <HAL_GPIO_Init+0x2f4>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	3301      	adds	r3, #1
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	fa22 f303 	lsr.w	r3, r2, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f47f ae96 	bne.w	8001400 <HAL_GPIO_Init+0x14>
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	372c      	adds	r7, #44	; 0x2c
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	40010400 	.word	0x40010400

080016e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	887b      	ldrh	r3, [r7, #2]
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d002      	beq.n	8001702 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016fc:	2301      	movs	r3, #1
 80016fe:	73fb      	strb	r3, [r7, #15]
 8001700:	e001      	b.n	8001706 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	460b      	mov	r3, r1
 800171c:	807b      	strh	r3, [r7, #2]
 800171e:	4613      	mov	r3, r2
 8001720:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001722:	787b      	ldrb	r3, [r7, #1]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001728:	887a      	ldrh	r2, [r7, #2]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800172e:	e003      	b.n	8001738 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001730:	887b      	ldrh	r3, [r7, #2]
 8001732:	041a      	lsls	r2, r3, #16
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	611a      	str	r2, [r3, #16]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
	...

08001744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e272      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8087 	beq.w	8001872 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001764:	4b92      	ldr	r3, [pc, #584]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b04      	cmp	r3, #4
 800176e:	d00c      	beq.n	800178a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001770:	4b8f      	ldr	r3, [pc, #572]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b08      	cmp	r3, #8
 800177a:	d112      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5e>
 800177c:	4b8c      	ldr	r3, [pc, #560]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001788:	d10b      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178a:	4b89      	ldr	r3, [pc, #548]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d06c      	beq.n	8001870 <HAL_RCC_OscConfig+0x12c>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d168      	bne.n	8001870 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e24c      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x76>
 80017ac:	4b80      	ldr	r3, [pc, #512]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a7f      	ldr	r2, [pc, #508]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	e02e      	b.n	8001818 <HAL_RCC_OscConfig+0xd4>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0x98>
 80017c2:	4b7b      	ldr	r3, [pc, #492]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a7a      	ldr	r2, [pc, #488]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b78      	ldr	r3, [pc, #480]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a77      	ldr	r2, [pc, #476]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e01d      	b.n	8001818 <HAL_RCC_OscConfig+0xd4>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0xbc>
 80017e6:	4b72      	ldr	r3, [pc, #456]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a71      	ldr	r2, [pc, #452]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b6f      	ldr	r3, [pc, #444]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a6e      	ldr	r2, [pc, #440]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e00b      	b.n	8001818 <HAL_RCC_OscConfig+0xd4>
 8001800:	4b6b      	ldr	r3, [pc, #428]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a6a      	ldr	r2, [pc, #424]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b68      	ldr	r3, [pc, #416]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a67      	ldr	r2, [pc, #412]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001816:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d013      	beq.n	8001848 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff fccc 	bl	80011bc <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff fcc8 	bl	80011bc <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	; 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e200      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b5d      	ldr	r3, [pc, #372]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0xe4>
 8001846:	e014      	b.n	8001872 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fcb8 	bl	80011bc <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fcb4 	bl	80011bc <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e1ec      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001862:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x10c>
 800186e:	e000      	b.n	8001872 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d063      	beq.n	8001946 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800187e:	4b4c      	ldr	r3, [pc, #304]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00b      	beq.n	80018a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800188a:	4b49      	ldr	r3, [pc, #292]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	2b08      	cmp	r3, #8
 8001894:	d11c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x18c>
 8001896:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d116      	bne.n	80018d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a2:	4b43      	ldr	r3, [pc, #268]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_RCC_OscConfig+0x176>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e1c0      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ba:	4b3d      	ldr	r3, [pc, #244]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4939      	ldr	r1, [pc, #228]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ce:	e03a      	b.n	8001946 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d020      	beq.n	800191a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d8:	4b36      	ldr	r3, [pc, #216]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff fc6d 	bl	80011bc <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e6:	f7ff fc69 	bl	80011bc <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e1a1      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f8:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4927      	ldr	r1, [pc, #156]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191a:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fc4c 	bl	80011bc <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001928:	f7ff fc48 	bl	80011bc <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e180      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d03a      	beq.n	80019c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d019      	beq.n	800198e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_RCC_OscConfig+0x274>)
 800195c:	2201      	movs	r2, #1
 800195e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001960:	f7ff fc2c 	bl	80011bc <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001968:	f7ff fc28 	bl	80011bc <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e160      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001986:	2001      	movs	r0, #1
 8001988:	f000 fa9c 	bl	8001ec4 <RCC_Delay>
 800198c:	e01c      	b.n	80019c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001994:	f7ff fc12 	bl	80011bc <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199a:	e00f      	b.n	80019bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199c:	f7ff fc0e 	bl	80011bc <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d908      	bls.n	80019bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e146      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000
 80019b4:	42420000 	.word	0x42420000
 80019b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019bc:	4b92      	ldr	r3, [pc, #584]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1e9      	bne.n	800199c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 80a6 	beq.w	8001b22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019da:	4b8b      	ldr	r3, [pc, #556]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10d      	bne.n	8001a02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	4b88      	ldr	r3, [pc, #544]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	4a87      	ldr	r2, [pc, #540]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f0:	61d3      	str	r3, [r2, #28]
 80019f2:	4b85      	ldr	r3, [pc, #532]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019fe:	2301      	movs	r3, #1
 8001a00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a02:	4b82      	ldr	r3, [pc, #520]	; (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d118      	bne.n	8001a40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a0e:	4b7f      	ldr	r3, [pc, #508]	; (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a7e      	ldr	r2, [pc, #504]	; (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1a:	f7ff fbcf 	bl	80011bc <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a22:	f7ff fbcb 	bl	80011bc <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b64      	cmp	r3, #100	; 0x64
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e103      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a34:	4b75      	ldr	r3, [pc, #468]	; (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_OscConfig+0x312>
 8001a48:	4b6f      	ldr	r3, [pc, #444]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4a6e      	ldr	r2, [pc, #440]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6213      	str	r3, [r2, #32]
 8001a54:	e02d      	b.n	8001ab2 <HAL_RCC_OscConfig+0x36e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x334>
 8001a5e:	4b6a      	ldr	r3, [pc, #424]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a69      	ldr	r2, [pc, #420]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	6213      	str	r3, [r2, #32]
 8001a6a:	4b67      	ldr	r3, [pc, #412]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4a66      	ldr	r2, [pc, #408]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	6213      	str	r3, [r2, #32]
 8001a76:	e01c      	b.n	8001ab2 <HAL_RCC_OscConfig+0x36e>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	d10c      	bne.n	8001a9a <HAL_RCC_OscConfig+0x356>
 8001a80:	4b61      	ldr	r3, [pc, #388]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	4a60      	ldr	r2, [pc, #384]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a86:	f043 0304 	orr.w	r3, r3, #4
 8001a8a:	6213      	str	r3, [r2, #32]
 8001a8c:	4b5e      	ldr	r3, [pc, #376]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4a5d      	ldr	r2, [pc, #372]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6213      	str	r3, [r2, #32]
 8001a98:	e00b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x36e>
 8001a9a:	4b5b      	ldr	r3, [pc, #364]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4a5a      	ldr	r2, [pc, #360]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	6213      	str	r3, [r2, #32]
 8001aa6:	4b58      	ldr	r3, [pc, #352]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	4a57      	ldr	r2, [pc, #348]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	f023 0304 	bic.w	r3, r3, #4
 8001ab0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d015      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aba:	f7ff fb7f 	bl	80011bc <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7ff fb7b 	bl	80011bc <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e0b1      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad8:	4b4b      	ldr	r3, [pc, #300]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0ee      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x37e>
 8001ae4:	e014      	b.n	8001b10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff fb69 	bl	80011bc <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aec:	e00a      	b.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7ff fb65 	bl	80011bc <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e09b      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b04:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1ee      	bne.n	8001aee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d105      	bne.n	8001b22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b16:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a3b      	ldr	r2, [pc, #236]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 8087 	beq.w	8001c3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b2c:	4b36      	ldr	r3, [pc, #216]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d061      	beq.n	8001bfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d146      	bne.n	8001bce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b40:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <HAL_RCC_OscConfig+0x4cc>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff fb39 	bl	80011bc <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4e:	f7ff fb35 	bl	80011bc <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e06d      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b60:	4b29      	ldr	r3, [pc, #164]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b74:	d108      	bne.n	8001b88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b76:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	4921      	ldr	r1, [pc, #132]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b88:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a19      	ldr	r1, [r3, #32]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	491b      	ldr	r1, [pc, #108]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_RCC_OscConfig+0x4cc>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fb09 	bl	80011bc <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bae:	f7ff fb05 	bl	80011bc <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e03d      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x46a>
 8001bcc:	e035      	b.n	8001c3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <HAL_RCC_OscConfig+0x4cc>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff faf2 	bl	80011bc <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff faee 	bl	80011bc <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e026      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x498>
 8001bfa:	e01e      	b.n	8001c3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e019      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40007000 	.word	0x40007000
 8001c10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCC_OscConfig+0x500>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d106      	bne.n	8001c36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000

08001c48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0d0      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d910      	bls.n	8001c8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b67      	ldr	r3, [pc, #412]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 0207 	bic.w	r2, r3, #7
 8001c72:	4965      	ldr	r1, [pc, #404]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7a:	4b63      	ldr	r3, [pc, #396]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0b8      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d020      	beq.n	8001cda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca4:	4b59      	ldr	r3, [pc, #356]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4a58      	ldr	r2, [pc, #352]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cbc:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc8:	4b50      	ldr	r3, [pc, #320]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	494d      	ldr	r1, [pc, #308]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d040      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d107      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d115      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e07f      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e073      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e06b      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d26:	4b39      	ldr	r3, [pc, #228]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f023 0203 	bic.w	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4936      	ldr	r1, [pc, #216]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d38:	f7ff fa40 	bl	80011bc <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7ff fa3c 	bl	80011bc <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e053      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 020c 	and.w	r2, r3, #12
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1eb      	bne.n	8001d40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d210      	bcs.n	8001d98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 0207 	bic.w	r2, r3, #7
 8001d7e:	4922      	ldr	r1, [pc, #136]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e032      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4916      	ldr	r1, [pc, #88]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	490e      	ldr	r1, [pc, #56]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dd6:	f000 f821 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	490a      	ldr	r1, [pc, #40]	; (8001e10 <HAL_RCC_ClockConfig+0x1c8>)
 8001de8:	5ccb      	ldrb	r3, [r1, r3]
 8001dea:	fa22 f303 	lsr.w	r3, r2, r3
 8001dee:	4a09      	ldr	r2, [pc, #36]	; (8001e14 <HAL_RCC_ClockConfig+0x1cc>)
 8001df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_RCC_ClockConfig+0x1d0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff f99e 	bl	8001138 <HAL_InitTick>

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40022000 	.word	0x40022000
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	08002728 	.word	0x08002728
 8001e14:	2000013c 	.word	0x2000013c
 8001e18:	20000140 	.word	0x20000140

08001e1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d002      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x30>
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d003      	beq.n	8001e52 <HAL_RCC_GetSysClockFreq+0x36>
 8001e4a:	e027      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e4c:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e4e:	613b      	str	r3, [r7, #16]
      break;
 8001e50:	e027      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	0c9b      	lsrs	r3, r3, #18
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	4a17      	ldr	r2, [pc, #92]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e5c:	5cd3      	ldrb	r3, [r2, r3]
 8001e5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d010      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	0c5b      	lsrs	r3, r3, #17
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	4a11      	ldr	r2, [pc, #68]	; (8001ebc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e76:	5cd3      	ldrb	r3, [r2, r3]
 8001e78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e7e:	fb03 f202 	mul.w	r2, r3, r2
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	e004      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e90:	fb02 f303 	mul.w	r3, r2, r3
 8001e94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	613b      	str	r3, [r7, #16]
      break;
 8001e9a:	e002      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e9e:	613b      	str	r3, [r7, #16]
      break;
 8001ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea2:	693b      	ldr	r3, [r7, #16]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	007a1200 	.word	0x007a1200
 8001eb8:	08002738 	.word	0x08002738
 8001ebc:	08002748 	.word	0x08002748
 8001ec0:	003d0900 	.word	0x003d0900

08001ec4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <RCC_Delay+0x34>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <RCC_Delay+0x38>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	0a5b      	lsrs	r3, r3, #9
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	fb02 f303 	mul.w	r3, r2, r3
 8001ede:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ee0:	bf00      	nop
  }
  while (Delay --);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1e5a      	subs	r2, r3, #1
 8001ee6:	60fa      	str	r2, [r7, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f9      	bne.n	8001ee0 <RCC_Delay+0x1c>
}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	2000013c 	.word	0x2000013c
 8001efc:	10624dd3 	.word	0x10624dd3

08001f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e041      	b.n	8001f96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d106      	bne.n	8001f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff f86e 	bl	8001008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4610      	mov	r0, r2
 8001f40:	f000 fa56 	bl	80023f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d001      	beq.n	8001fb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e035      	b.n	8002024 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0201 	orr.w	r2, r2, #1
 8001fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a16      	ldr	r2, [pc, #88]	; (8002030 <HAL_TIM_Base_Start_IT+0x90>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d009      	beq.n	8001fee <HAL_TIM_Base_Start_IT+0x4e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe2:	d004      	beq.n	8001fee <HAL_TIM_Base_Start_IT+0x4e>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a12      	ldr	r2, [pc, #72]	; (8002034 <HAL_TIM_Base_Start_IT+0x94>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d111      	bne.n	8002012 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2b06      	cmp	r3, #6
 8001ffe:	d010      	beq.n	8002022 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002010:	e007      	b.n	8002022 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f042 0201 	orr.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40012c00 	.word	0x40012c00
 8002034:	40000400 	.word	0x40000400

08002038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d020      	beq.n	800209c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d01b      	beq.n	800209c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0202 	mvn.w	r2, #2
 800206c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f998 	bl	80023b8 <HAL_TIM_IC_CaptureCallback>
 8002088:	e005      	b.n	8002096 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f98b 	bl	80023a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f99a 	bl	80023ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d020      	beq.n	80020e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d01b      	beq.n	80020e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0204 	mvn.w	r2, #4
 80020b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2202      	movs	r2, #2
 80020be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f972 	bl	80023b8 <HAL_TIM_IC_CaptureCallback>
 80020d4:	e005      	b.n	80020e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f965 	bl	80023a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f974 	bl	80023ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d020      	beq.n	8002134 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d01b      	beq.n	8002134 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0208 	mvn.w	r2, #8
 8002104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2204      	movs	r2, #4
 800210a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f94c 	bl	80023b8 <HAL_TIM_IC_CaptureCallback>
 8002120:	e005      	b.n	800212e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f93f 	bl	80023a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f94e 	bl	80023ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	2b00      	cmp	r3, #0
 800213c:	d020      	beq.n	8002180 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f003 0310 	and.w	r3, r3, #16
 8002144:	2b00      	cmp	r3, #0
 8002146:	d01b      	beq.n	8002180 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0210 	mvn.w	r2, #16
 8002150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2208      	movs	r2, #8
 8002156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f926 	bl	80023b8 <HAL_TIM_IC_CaptureCallback>
 800216c:	e005      	b.n	800217a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f919 	bl	80023a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f928 	bl	80023ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00c      	beq.n	80021a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d007      	beq.n	80021a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0201 	mvn.w	r2, #1
 800219c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe fd5e 	bl	8000c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00c      	beq.n	80021c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d007      	beq.n	80021c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 fa6f 	bl	80026a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00c      	beq.n	80021ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d007      	beq.n	80021ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f8f8 	bl	80023dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f003 0320 	and.w	r3, r3, #32
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00c      	beq.n	8002210 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d007      	beq.n	8002210 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0220 	mvn.w	r2, #32
 8002208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fa42 	bl	8002694 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002210:	bf00      	nop
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_TIM_ConfigClockSource+0x1c>
 8002230:	2302      	movs	r3, #2
 8002232:	e0b4      	b.n	800239e <HAL_TIM_ConfigClockSource+0x186>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800225a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800226c:	d03e      	beq.n	80022ec <HAL_TIM_ConfigClockSource+0xd4>
 800226e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002272:	f200 8087 	bhi.w	8002384 <HAL_TIM_ConfigClockSource+0x16c>
 8002276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227a:	f000 8086 	beq.w	800238a <HAL_TIM_ConfigClockSource+0x172>
 800227e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002282:	d87f      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x16c>
 8002284:	2b70      	cmp	r3, #112	; 0x70
 8002286:	d01a      	beq.n	80022be <HAL_TIM_ConfigClockSource+0xa6>
 8002288:	2b70      	cmp	r3, #112	; 0x70
 800228a:	d87b      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x16c>
 800228c:	2b60      	cmp	r3, #96	; 0x60
 800228e:	d050      	beq.n	8002332 <HAL_TIM_ConfigClockSource+0x11a>
 8002290:	2b60      	cmp	r3, #96	; 0x60
 8002292:	d877      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x16c>
 8002294:	2b50      	cmp	r3, #80	; 0x50
 8002296:	d03c      	beq.n	8002312 <HAL_TIM_ConfigClockSource+0xfa>
 8002298:	2b50      	cmp	r3, #80	; 0x50
 800229a:	d873      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x16c>
 800229c:	2b40      	cmp	r3, #64	; 0x40
 800229e:	d058      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0x13a>
 80022a0:	2b40      	cmp	r3, #64	; 0x40
 80022a2:	d86f      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x16c>
 80022a4:	2b30      	cmp	r3, #48	; 0x30
 80022a6:	d064      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x15a>
 80022a8:	2b30      	cmp	r3, #48	; 0x30
 80022aa:	d86b      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x16c>
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d060      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x15a>
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	d867      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x16c>
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d05c      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x15a>
 80022b8:	2b10      	cmp	r3, #16
 80022ba:	d05a      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x15a>
 80022bc:	e062      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022ce:	f000 f96a 	bl	80025a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	609a      	str	r2, [r3, #8]
      break;
 80022ea:	e04f      	b.n	800238c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022fc:	f000 f953 	bl	80025a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800230e:	609a      	str	r2, [r3, #8]
      break;
 8002310:	e03c      	b.n	800238c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800231e:	461a      	mov	r2, r3
 8002320:	f000 f8ca 	bl	80024b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2150      	movs	r1, #80	; 0x50
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f921 	bl	8002572 <TIM_ITRx_SetConfig>
      break;
 8002330:	e02c      	b.n	800238c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800233e:	461a      	mov	r2, r3
 8002340:	f000 f8e8 	bl	8002514 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2160      	movs	r1, #96	; 0x60
 800234a:	4618      	mov	r0, r3
 800234c:	f000 f911 	bl	8002572 <TIM_ITRx_SetConfig>
      break;
 8002350:	e01c      	b.n	800238c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800235e:	461a      	mov	r2, r3
 8002360:	f000 f8aa 	bl	80024b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2140      	movs	r1, #64	; 0x40
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f901 	bl	8002572 <TIM_ITRx_SetConfig>
      break;
 8002370:	e00c      	b.n	800238c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4619      	mov	r1, r3
 800237c:	4610      	mov	r0, r2
 800237e:	f000 f8f8 	bl	8002572 <TIM_ITRx_SetConfig>
      break;
 8002382:	e003      	b.n	800238c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
      break;
 8002388:	e000      	b.n	800238c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800238a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
	...

080023f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a2b      	ldr	r2, [pc, #172]	; (80024b0 <TIM_Base_SetConfig+0xc0>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d007      	beq.n	8002418 <TIM_Base_SetConfig+0x28>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240e:	d003      	beq.n	8002418 <TIM_Base_SetConfig+0x28>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a28      	ldr	r2, [pc, #160]	; (80024b4 <TIM_Base_SetConfig+0xc4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d108      	bne.n	800242a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800241e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a20      	ldr	r2, [pc, #128]	; (80024b0 <TIM_Base_SetConfig+0xc0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d007      	beq.n	8002442 <TIM_Base_SetConfig+0x52>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002438:	d003      	beq.n	8002442 <TIM_Base_SetConfig+0x52>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a1d      	ldr	r2, [pc, #116]	; (80024b4 <TIM_Base_SetConfig+0xc4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d108      	bne.n	8002454 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	4313      	orrs	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	4313      	orrs	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <TIM_Base_SetConfig+0xc0>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d103      	bne.n	8002488 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	f023 0201 	bic.w	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	611a      	str	r2, [r3, #16]
  }
}
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	40012c00 	.word	0x40012c00
 80024b4:	40000400 	.word	0x40000400

080024b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b087      	sub	sp, #28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	f023 0201 	bic.w	r2, r3, #1
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f023 030a 	bic.w	r3, r3, #10
 80024f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	621a      	str	r2, [r3, #32]
}
 800250a:	bf00      	nop
 800250c:	371c      	adds	r7, #28
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	f023 0210 	bic.w	r2, r3, #16
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800253e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	031b      	lsls	r3, r3, #12
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002550:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	4313      	orrs	r3, r2
 800255a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	621a      	str	r2, [r3, #32]
}
 8002568:	bf00      	nop
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002572:	b480      	push	{r7}
 8002574:	b085      	sub	sp, #20
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	f043 0307 	orr.w	r3, r3, #7
 8002594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	609a      	str	r2, [r3, #8]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b087      	sub	sp, #28
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	60f8      	str	r0, [r7, #12]
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	021a      	lsls	r2, r3, #8
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	609a      	str	r2, [r3, #8]
}
 80025da:	bf00      	nop
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e041      	b.n	8002680 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a14      	ldr	r2, [pc, #80]	; (800268c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d009      	beq.n	8002654 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002648:	d004      	beq.n	8002654 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a10      	ldr	r2, [pc, #64]	; (8002690 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d10c      	bne.n	800266e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800265a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	4313      	orrs	r3, r2
 8002664:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40012c00 	.word	0x40012c00
 8002690:	40000400 	.word	0x40000400

08002694 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr

080026a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <memset>:
 80026b8:	4603      	mov	r3, r0
 80026ba:	4402      	add	r2, r0
 80026bc:	4293      	cmp	r3, r2
 80026be:	d100      	bne.n	80026c2 <memset+0xa>
 80026c0:	4770      	bx	lr
 80026c2:	f803 1b01 	strb.w	r1, [r3], #1
 80026c6:	e7f9      	b.n	80026bc <memset+0x4>

080026c8 <__libc_init_array>:
 80026c8:	b570      	push	{r4, r5, r6, lr}
 80026ca:	2600      	movs	r6, #0
 80026cc:	4d0c      	ldr	r5, [pc, #48]	; (8002700 <__libc_init_array+0x38>)
 80026ce:	4c0d      	ldr	r4, [pc, #52]	; (8002704 <__libc_init_array+0x3c>)
 80026d0:	1b64      	subs	r4, r4, r5
 80026d2:	10a4      	asrs	r4, r4, #2
 80026d4:	42a6      	cmp	r6, r4
 80026d6:	d109      	bne.n	80026ec <__libc_init_array+0x24>
 80026d8:	f000 f81a 	bl	8002710 <_init>
 80026dc:	2600      	movs	r6, #0
 80026de:	4d0a      	ldr	r5, [pc, #40]	; (8002708 <__libc_init_array+0x40>)
 80026e0:	4c0a      	ldr	r4, [pc, #40]	; (800270c <__libc_init_array+0x44>)
 80026e2:	1b64      	subs	r4, r4, r5
 80026e4:	10a4      	asrs	r4, r4, #2
 80026e6:	42a6      	cmp	r6, r4
 80026e8:	d105      	bne.n	80026f6 <__libc_init_array+0x2e>
 80026ea:	bd70      	pop	{r4, r5, r6, pc}
 80026ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f0:	4798      	blx	r3
 80026f2:	3601      	adds	r6, #1
 80026f4:	e7ee      	b.n	80026d4 <__libc_init_array+0xc>
 80026f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80026fa:	4798      	blx	r3
 80026fc:	3601      	adds	r6, #1
 80026fe:	e7f2      	b.n	80026e6 <__libc_init_array+0x1e>
 8002700:	0800274c 	.word	0x0800274c
 8002704:	0800274c 	.word	0x0800274c
 8002708:	0800274c 	.word	0x0800274c
 800270c:	08002750 	.word	0x08002750

08002710 <_init>:
 8002710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002712:	bf00      	nop
 8002714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002716:	bc08      	pop	{r3}
 8002718:	469e      	mov	lr, r3
 800271a:	4770      	bx	lr

0800271c <_fini>:
 800271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271e:	bf00      	nop
 8002720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002722:	bc08      	pop	{r3}
 8002724:	469e      	mov	lr, r3
 8002726:	4770      	bx	lr
